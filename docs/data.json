{
    "project": {
        "name": "pngjs-image",
        "description": "JavaScript-based PNG image encoder, decoder, and manipulator",
        "version": "0.11.5"
    },
    "files": {
        "lib/filters/blur.js": {
            "name": "lib/filters/blur.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/filters/grayScale.js": {
            "name": "lib/filters/grayScale.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/filters/lightness.js": {
            "name": "lib/filters/lightness.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/filters/luma.js": {
            "name": "lib/filters/luma.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/filters/luminosity.js": {
            "name": "lib/filters/luminosity.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/filters/sepia.js": {
            "name": "lib/filters/sepia.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/png/chunks/IDAT.js": {
            "name": "lib/png/chunks/IDAT.js",
            "modules": {},
            "classes": {
                "IDAT": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/chunks/IEND.js": {
            "name": "lib/png/chunks/IEND.js",
            "modules": {},
            "classes": {
                "IEND": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/chunks/IHDR.js": {
            "name": "lib/png/chunks/IHDR.js",
            "modules": {},
            "classes": {
                "IHDR": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/chunks/PLTE.js": {
            "name": "lib/png/chunks/PLTE.js",
            "modules": {},
            "classes": {
                "PLTE": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/chunks/bKGD.js": {
            "name": "lib/png/chunks/bKGD.js",
            "modules": {},
            "classes": {
                "bKGD": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/chunks/cHRM.js": {
            "name": "lib/png/chunks/cHRM.js",
            "modules": {},
            "classes": {
                "cHRM": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/chunks/gAMA.js": {
            "name": "lib/png/chunks/gAMA.js",
            "modules": {},
            "classes": {
                "gAMA": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/chunks/hIST.js": {
            "name": "lib/png/chunks/hIST.js",
            "modules": {},
            "classes": {
                "hIST": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/chunks/iCCP.js": {
            "name": "lib/png/chunks/iCCP.js",
            "modules": {},
            "classes": {
                "iCCP": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/chunks/iTXt.js": {
            "name": "lib/png/chunks/iTXt.js",
            "modules": {},
            "classes": {
                "iTXt": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/chunks/pHYs.js": {
            "name": "lib/png/chunks/pHYs.js",
            "modules": {},
            "classes": {
                "pHYs": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/chunks/sBIT.js": {
            "name": "lib/png/chunks/sBIT.js",
            "modules": {},
            "classes": {
                "sBIT": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/chunks/sPLT.js": {
            "name": "lib/png/chunks/sPLT.js",
            "modules": {},
            "classes": {
                "sPLT": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/chunks/sRGB.js": {
            "name": "lib/png/chunks/sRGB.js",
            "modules": {},
            "classes": {
                "sRGB": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/chunks/tEXt.js": {
            "name": "lib/png/chunks/tEXt.js",
            "modules": {},
            "classes": {
                "tEXt": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/chunks/tIME.js": {
            "name": "lib/png/chunks/tIME.js",
            "modules": {},
            "classes": {
                "tIME": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/chunks/tRNS.js": {
            "name": "lib/png/chunks/tRNS.js",
            "modules": {},
            "classes": {
                "tRNS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/chunks/zTXt.js": {
            "name": "lib/png/chunks/zTXt.js",
            "modules": {},
            "classes": {
                "zTXt": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/custom/jsOn.js": {
            "name": "lib/png/custom/jsOn.js",
            "modules": {},
            "classes": {
                "jsOn": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/custom/stRT.js": {
            "name": "lib/png/custom/stRT.js",
            "modules": {},
            "classes": {
                "stRT": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/custom/zzZz.js": {
            "name": "lib/png/custom/zzZz.js",
            "modules": {},
            "classes": {
                "zzZz": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/processor/compressor.js": {
            "name": "lib/png/processor/compressor.js",
            "modules": {},
            "classes": {
                "Compressor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/processor/crc.js": {
            "name": "lib/png/processor/crc.js",
            "modules": {},
            "classes": {
                "CRC": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/processor/filter.js": {
            "name": "lib/png/processor/filter.js",
            "modules": {},
            "classes": {
                "Filter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/processor/interlace.js": {
            "name": "lib/png/processor/interlace.js",
            "modules": {},
            "classes": {
                "Interlace": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/processor/normalizer.js": {
            "name": "lib/png/processor/normalizer.js",
            "modules": {},
            "classes": {
                "Normalizer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/processor/parser.js": {
            "name": "lib/png/processor/parser.js",
            "modules": {},
            "classes": {
                "Scanline Parser": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/processor/scaler.js": {
            "name": "lib/png/processor/scaler.js",
            "modules": {},
            "classes": {
                "Scaler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/utils/bufferedStream.js": {
            "name": "lib/png/utils/bufferedStream.js",
            "modules": {},
            "classes": {
                "BufferedStream": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/utils/chunkUtils.js": {
            "name": "lib/png/utils/chunkUtils.js",
            "modules": {},
            "classes": {
                "chunkUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/utils/constants.js": {
            "name": "lib/png/utils/constants.js",
            "modules": {},
            "classes": {
                "constants": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/utils/utils.js": {
            "name": "lib/png/utils/utils.js",
            "modules": {},
            "classes": {
                "utils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/chunk.js": {
            "name": "lib/png/chunk.js",
            "modules": {},
            "classes": {
                "Chunk": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/decoder.js": {
            "name": "lib/png/decoder.js",
            "modules": {},
            "classes": {
                "Decoder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/png/encoder.js": {
            "name": "lib/png/encoder.js",
            "modules": {},
            "classes": {
                "Encoder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/conversion.js": {
            "name": "lib/conversion.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/filters.js": {
            "name": "lib/filters.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/modify.js": {
            "name": "lib/modify.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/pixel.js": {
            "name": "lib/pixel.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "index.js": {
            "name": "index.js",
            "modules": {},
            "classes": {
                "PNGImage": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "PNG": {
            "name": "PNG",
            "submodules": {
                "PNGChunks": 1,
                "PNGChunks\n\nOptions:\n- background {boolean} - Should this chunk be applied to the image? (default: false)": 1,
                "PNGChunks\n\nOptions:\n- gamma {boolean} - Should this chunk be applied to the image? (default: false)": 1,
                "PNGChunks\n\nOptions:\n- transparent {boolean} - Should this chunk be applied to the image? (default: true)": 1,
                "PNGCore": 1,
                "Core": 1
            },
            "classes": {
                "IDAT": 1,
                "IEND": 1,
                "IHDR": 1,
                "PLTE": 1,
                "bKGD": 1,
                "cHRM": 1,
                "gAMA": 1,
                "hIST": 1,
                "iCCP": 1,
                "iTXt": 1,
                "pHYs": 1,
                "sBIT": 1,
                "sPLT": 1,
                "sRGB": 1,
                "tEXt": 1,
                "tIME": 1,
                "tRNS": 1,
                "zTXt": 1,
                "jsOn": 1,
                "stRT": 1,
                "zzZz": 1,
                "Compressor": 1,
                "CRC": 1,
                "Filter": 1,
                "Interlace": 1,
                "Normalizer": 1,
                "Scanline Parser": 1,
                "Scaler": 1,
                "BufferedStream": 1,
                "chunkUtils": 1,
                "constants": 1,
                "utils": 1,
                "Chunk": 1,
                "Decoder": 1,
                "Encoder": 1,
                "PNGImage": 1
            },
            "fors": {},
            "namespaces": {},
            "file": "index.js",
            "line": 18
        },
        "PNGChunks": {
            "name": "PNGChunks",
            "submodules": {},
            "classes": {
                "IDAT": 1,
                "IEND": 1,
                "IHDR": 1,
                "PLTE": 1,
                "cHRM": 1,
                "hIST": 1,
                "iCCP": 1,
                "iTXt": 1,
                "pHYs": 1,
                "sBIT": 1,
                "sPLT": 1,
                "sRGB": 1,
                "tEXt": 1,
                "tIME": 1,
                "zTXt": 1,
                "jsOn": 1,
                "stRT": 1,
                "zzZz": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/custom/zzZz.js",
            "line": 8
        },
        "PNGChunks\n\nOptions:\n- background {boolean} - Should this chunk be applied to the image? (default: false)": {
            "name": "PNGChunks\n\nOptions:\n- background {boolean} - Should this chunk be applied to the image? (default: false)",
            "submodules": {},
            "classes": {
                "bKGD": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/chunks/bKGD.js",
            "line": 7
        },
        "PNGChunks\n\nOptions:\n- gamma {boolean} - Should this chunk be applied to the image? (default: false)": {
            "name": "PNGChunks\n\nOptions:\n- gamma {boolean} - Should this chunk be applied to the image? (default: false)",
            "submodules": {},
            "classes": {
                "gAMA": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/chunks/gAMA.js",
            "line": 6
        },
        "PNGChunks\n\nOptions:\n- transparent {boolean} - Should this chunk be applied to the image? (default: true)": {
            "name": "PNGChunks\n\nOptions:\n- transparent {boolean} - Should this chunk be applied to the image? (default: true)",
            "submodules": {},
            "classes": {
                "tRNS": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/chunks/tRNS.js",
            "line": 6
        },
        "PNGCore": {
            "name": "PNGCore",
            "submodules": {},
            "classes": {
                "Compressor": 1,
                "CRC": 1,
                "Filter": 1,
                "Interlace": 1,
                "Normalizer": 1,
                "Scanline Parser": 1,
                "Scaler": 1,
                "BufferedStream": 1,
                "chunkUtils": 1,
                "constants": 1,
                "utils": 1,
                "Chunk": 1,
                "Decoder": 1,
                "Encoder": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/encoder.js",
            "line": 15
        },
        "Core": {
            "name": "Core",
            "submodules": {},
            "classes": {
                "PNGImage": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "PNG",
            "namespace": "",
            "description": "PNGjs-image class",
            "file": "index.js",
            "line": 18
        }
    },
    "classes": {
        "IDAT": {
            "name": "IDAT",
            "shortname": "IDAT",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "file": "lib/png/chunks/IDAT.js",
            "line": 8,
            "submodule": "PNGChunks"
        },
        "IEND": {
            "name": "IEND",
            "shortname": "IEND",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/chunks/IEND.js",
            "line": 4,
            "submodule": "PNGChunks"
        },
        "IHDR": {
            "name": "IHDR",
            "shortname": "IHDR",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/chunks/IHDR.js",
            "line": 17,
            "submodule": "PNGChunks"
        },
        "PLTE": {
            "name": "PLTE",
            "shortname": "PLTE",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/chunks/PLTE.js",
            "line": 8,
            "submodule": "PNGChunks"
        },
        "bKGD": {
            "name": "bKGD",
            "shortname": "bKGD",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/chunks/bKGD.js",
            "line": 7,
            "submodule": "PNGChunks\n\nOptions:\n- background {boolean} - Should this chunk be applied to the image? (default: false)"
        },
        "cHRM": {
            "name": "cHRM",
            "shortname": "cHRM",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/chunks/cHRM.js",
            "line": 4,
            "submodule": "PNGChunks"
        },
        "gAMA": {
            "name": "gAMA",
            "shortname": "gAMA",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/chunks/gAMA.js",
            "line": 6,
            "submodule": "PNGChunks\n\nOptions:\n- gamma {boolean} - Should this chunk be applied to the image? (default: false)"
        },
        "hIST": {
            "name": "hIST",
            "shortname": "hIST",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/chunks/hIST.js",
            "line": 4,
            "submodule": "PNGChunks"
        },
        "iCCP": {
            "name": "iCCP",
            "shortname": "iCCP",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/chunks/iCCP.js",
            "line": 8,
            "submodule": "PNGChunks"
        },
        "iTXt": {
            "name": "iTXt",
            "shortname": "iTXt",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/chunks/iTXt.js",
            "line": 4,
            "submodule": "PNGChunks"
        },
        "pHYs": {
            "name": "pHYs",
            "shortname": "pHYs",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/chunks/pHYs.js",
            "line": 6,
            "submodule": "PNGChunks"
        },
        "sBIT": {
            "name": "sBIT",
            "shortname": "sBIT",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/chunks/sBIT.js",
            "line": 4,
            "submodule": "PNGChunks"
        },
        "sPLT": {
            "name": "sPLT",
            "shortname": "sPLT",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/chunks/sPLT.js",
            "line": 4,
            "submodule": "PNGChunks"
        },
        "sRGB": {
            "name": "sRGB",
            "shortname": "sRGB",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/chunks/sRGB.js",
            "line": 6,
            "submodule": "PNGChunks"
        },
        "tEXt": {
            "name": "tEXt",
            "shortname": "tEXt",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/chunks/tEXt.js",
            "line": 7,
            "submodule": "PNGChunks"
        },
        "tIME": {
            "name": "tIME",
            "shortname": "tIME",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/chunks/tIME.js",
            "line": 4,
            "submodule": "PNGChunks"
        },
        "tRNS": {
            "name": "tRNS",
            "shortname": "tRNS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/chunks/tRNS.js",
            "line": 6,
            "submodule": "PNGChunks\n\nOptions:\n- transparent {boolean} - Should this chunk be applied to the image? (default: true)"
        },
        "zTXt": {
            "name": "zTXt",
            "shortname": "zTXt",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/chunks/zTXt.js",
            "line": 8,
            "submodule": "PNGChunks"
        },
        "jsOn": {
            "name": "jsOn",
            "shortname": "jsOn",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/custom/jsOn.js",
            "line": 9,
            "submodule": "PNGChunks"
        },
        "stRT": {
            "name": "stRT",
            "shortname": "stRT",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/custom/stRT.js",
            "line": 9,
            "submodule": "PNGChunks"
        },
        "zzZz": {
            "name": "zzZz",
            "shortname": "zzZz",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/custom/zzZz.js",
            "line": 8,
            "submodule": "PNGChunks"
        },
        "Compressor": {
            "name": "Compressor",
            "shortname": "Compressor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/processor/compressor.js",
            "line": 6,
            "submodule": "PNGCore",
            "params": [
                {
                    "name": "options",
                    "description": "Options for the compressor",
                    "type": "Object"
                }
            ],
            "is_constructor": 1
        },
        "CRC": {
            "name": "CRC",
            "shortname": "CRC",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/processor/crc.js",
            "line": 29,
            "submodule": "PNGCore",
            "is_constructor": 1
        },
        "Filter": {
            "name": "Filter",
            "shortname": "Filter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/processor/filter.js",
            "line": 6,
            "submodule": "PNGCore",
            "params": [
                {
                    "name": "headerChunk",
                    "description": "Header chunk of data stream",
                    "type": "Chunk"
                }
            ],
            "is_constructor": 1
        },
        "Interlace": {
            "name": "Interlace",
            "shortname": "Interlace",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/processor/interlace.js",
            "line": 6,
            "submodule": "PNGCore",
            "params": [
                {
                    "name": "headerChunk",
                    "description": "Header chunk of data stream",
                    "type": "Chunk"
                }
            ],
            "is_constructor": 1
        },
        "Normalizer": {
            "name": "Normalizer",
            "shortname": "Normalizer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/processor/normalizer.js",
            "line": 4,
            "submodule": "PNGCore",
            "params": [
                {
                    "name": "headerChunk",
                    "description": "Header chunk of data stream",
                    "type": "Chunk"
                }
            ],
            "is_constructor": 1
        },
        "Scanline Parser": {
            "name": "Scanline Parser",
            "shortname": "Scanline Parser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/processor/parser.js",
            "line": 7,
            "submodule": "PNGCore",
            "params": [
                {
                    "name": "headerChunk",
                    "description": "Header chunk of data stream",
                    "type": "Chunk"
                }
            ],
            "is_constructor": 1
        },
        "Scaler": {
            "name": "Scaler",
            "shortname": "Scaler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/processor/scaler.js",
            "line": 6,
            "submodule": "PNGCore",
            "params": [
                {
                    "name": "headerChunk",
                    "description": "Header chunk of data stream",
                    "type": "Chunk"
                }
            ],
            "is_constructor": 1
        },
        "BufferedStream": {
            "name": "BufferedStream",
            "shortname": "BufferedStream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/utils/bufferedStream.js",
            "line": 4,
            "submodule": "PNGCore",
            "params": [
                {
                    "name": "data",
                    "description": "Data buffer",
                    "type": "Buffer",
                    "optional": true
                },
                {
                    "name": "offset",
                    "description": "Offset within the data (With offset = false, they data will be taken as-is)",
                    "type": "Int|boolean",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "length",
                    "description": "Length of the data",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "data.length-offset"
                }
            ],
            "is_constructor": 1
        },
        "chunkUtils": {
            "name": "chunkUtils",
            "shortname": "chunkUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/utils/chunkUtils.js",
            "line": 4,
            "submodule": "PNGCore"
        },
        "constants": {
            "name": "constants",
            "shortname": "constants",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/utils/constants.js",
            "line": 4,
            "submodule": "PNGCore"
        },
        "utils": {
            "name": "utils",
            "shortname": "utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/utils/utils.js",
            "line": 6,
            "submodule": "PNGCore"
        },
        "Chunk": {
            "name": "Chunk",
            "shortname": "Chunk",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/chunk.js",
            "line": 7,
            "submodule": "PNGCore",
            "extends": "chunkUtils",
            "params": [
                {
                    "name": "type",
                    "description": "Chunk-type for loading the right chunk",
                    "type": "String"
                },
                {
                    "name": "chunks",
                    "description": "Dictionary of available chunks",
                    "type": "Object"
                }
            ],
            "is_constructor": 1
        },
        "Decoder": {
            "name": "Decoder",
            "shortname": "Decoder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/decoder.js",
            "line": 15,
            "submodule": "PNGCore",
            "extends": "chunkUtils",
            "is_constructor": 1
        },
        "Encoder": {
            "name": "Encoder",
            "shortname": "Encoder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "lib/png/encoder.js",
            "line": 15,
            "submodule": "PNGCore",
            "extends": "chunkUtils",
            "is_constructor": 1
        },
        "PNGImage": {
            "name": "PNGImage",
            "shortname": "PNGImage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PNG",
            "namespace": "",
            "file": "index.js",
            "line": 18,
            "description": "PNGjs-image class",
            "submodule": "Core",
            "type": "{object}",
            "params": [
                {
                    "name": "image",
                    "description": "png-js object",
                    "type": "PNG"
                }
            ],
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "lib/filters/blur.js",
            "line": 4,
            "description": "Blur filter",
            "itemtype": "method",
            "name": "blur-filter",
            "params": [
                {
                    "name": "source",
                    "description": "",
                    "type": "PNGImage"
                },
                {
                    "name": "destination",
                    "description": "",
                    "type": "PNGImage"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "funcName",
                            "description": "",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "IDAT"
        },
        {
            "file": "lib/filters/grayScale.js",
            "line": 4,
            "description": "Gray-scale filter",
            "itemtype": "method",
            "name": "gray-scale filter",
            "params": [
                {
                    "name": "source",
                    "description": "",
                    "type": "PNGImage"
                },
                {
                    "name": "destination",
                    "description": "",
                    "type": "PNGImage"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "IDAT"
        },
        {
            "file": "lib/filters/lightness.js",
            "line": 4,
            "description": "Lightness filter",
            "itemtype": "method",
            "name": "lightness filter",
            "params": [
                {
                    "name": "source",
                    "description": "",
                    "type": "PNGImage"
                },
                {
                    "name": "destination",
                    "description": "",
                    "type": "PNGImage"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "IDAT"
        },
        {
            "file": "lib/filters/luma.js",
            "line": 4,
            "description": "Luma filter",
            "itemtype": "method",
            "name": "luma filter",
            "params": [
                {
                    "name": "source",
                    "description": "",
                    "type": "PNGImage"
                },
                {
                    "name": "destination",
                    "description": "",
                    "type": "PNGImage"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "IDAT"
        },
        {
            "file": "lib/filters/luminosity.js",
            "line": 4,
            "description": "Luminosity filter",
            "itemtype": "method",
            "name": "luminosity filter",
            "params": [
                {
                    "name": "source",
                    "description": "",
                    "type": "PNGImage"
                },
                {
                    "name": "destination",
                    "description": "",
                    "type": "PNGImage"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "IDAT"
        },
        {
            "file": "lib/filters/sepia.js",
            "line": 4,
            "description": "Sepia filter",
            "itemtype": "method",
            "name": "sepia filter",
            "params": [
                {
                    "name": "source",
                    "description": "",
                    "type": "PNGImage"
                },
                {
                    "name": "destination",
                    "description": "",
                    "type": "PNGImage"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "IDAT"
        },
        {
            "file": "lib/png/chunks/IDAT.js",
            "line": 15,
            "description": "Gets the sequence",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "IDAT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IDAT.js",
            "line": 27,
            "description": "Gets the data stream",
            "itemtype": "method",
            "name": "getStream",
            "return": {
                "description": "",
                "type": "BufferedStream"
            },
            "class": "IDAT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IDAT.js",
            "line": 40,
            "description": "Sets a data stream",
            "itemtype": "method",
            "name": "setStream",
            "params": [
                {
                    "name": "stream",
                    "description": "",
                    "type": "BufferedStream"
                }
            ],
            "class": "IDAT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IDAT.js",
            "line": 51,
            "description": "Parsing of chunk data\n\nPhase 1",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "IDAT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IDAT.js",
            "line": 69,
            "description": "Composing of chunk data\n\nPhase 4",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "IDAT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IEND.js",
            "line": 11,
            "description": "Gets the sequence",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "IEND",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IEND.js",
            "line": 22,
            "description": "Parsing of chunk data\n\nPhase 1",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "IEND",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IEND.js",
            "line": 48,
            "description": "Returns a list of chunks to be added to the data-stream\n\nPhase 1",
            "static": 1,
            "itemtype": "method",
            "name": "encodeData",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "data",
                    "description": "Object that will be used to import data to the chunk",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "IEND",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IEND.js",
            "line": 64,
            "description": "Composing of chunk data\n\nPhase 4",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "IEND",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 24,
            "description": "Gets the sequence",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 35,
            "description": "Gets the width of the image",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 45,
            "description": "Sets the width of the image",
            "itemtype": "method",
            "name": "setWidth",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Int"
                }
            ],
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 59,
            "description": "Gets the height of the image",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 69,
            "description": "Sets the height of the image",
            "itemtype": "method",
            "name": "setHeight",
            "params": [
                {
                    "name": "height",
                    "description": "",
                    "type": "Int"
                }
            ],
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 83,
            "description": "Gets the bit-depth of the image data",
            "itemtype": "method",
            "name": "getBitDepth",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 93,
            "description": "Sets the bit-depth of the image data",
            "itemtype": "method",
            "name": "setBitDepth",
            "params": [
                {
                    "name": "bitDepth",
                    "description": "",
                    "type": "Int"
                }
            ],
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 107,
            "description": "Gets the color-type of the image data",
            "itemtype": "method",
            "name": "getColorType",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 117,
            "description": "Sets the color-type of the image data",
            "itemtype": "method",
            "name": "setColorType",
            "params": [
                {
                    "name": "colorType",
                    "description": "",
                    "type": "Int"
                }
            ],
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 132,
            "description": "Gets the compression method of the image data",
            "itemtype": "method",
            "name": "getCompressionMethod",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 142,
            "description": "Sets the compression method of the image data",
            "itemtype": "method",
            "name": "setCompressionMethod",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "Int"
                }
            ],
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 156,
            "description": "Gets the filter method of the image data",
            "itemtype": "method",
            "name": "getFilterMethod",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 166,
            "description": "Sets the filter method of the image data",
            "itemtype": "method",
            "name": "setFilterMethod",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "Int"
                }
            ],
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 180,
            "description": "Gets the interlace method of the image data",
            "itemtype": "method",
            "name": "getInterlaceMethod",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 190,
            "description": "Sets the interlace method of the image data",
            "itemtype": "method",
            "name": "setInterlaceMethod",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "Int"
                }
            ],
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 204,
            "description": "Does image have a an indexed color palette?",
            "itemtype": "method",
            "name": "hasIndexedColor",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 214,
            "description": "Is image in color?",
            "itemtype": "method",
            "name": "isColor",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 224,
            "description": "Does image have an alpha-chanel?",
            "itemtype": "method",
            "name": "hasAlphaChannel",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 234,
            "description": "Is the image interlaced?",
            "itemtype": "method",
            "name": "isInterlaced",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 245,
            "description": "Determines bytes per pixel",
            "itemtype": "method",
            "name": "getBytesPerPixel",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 256,
            "description": "Gets the number of samples for the color-type",
            "itemtype": "method",
            "name": "getSamples",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 266,
            "description": "Gets the number of samples for the color-type (unprocessed - palette not applied yet)",
            "itemtype": "method",
            "name": "getUnprocessedSamples",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 276,
            "description": "Gets the sample-depth for the color-type",
            "itemtype": "method",
            "name": "getSampleDepth",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 286,
            "description": "Determines the scan-line length",
            "itemtype": "method",
            "name": "getScanLineLength",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 296,
            "description": "Determines the scan-line length for a specified width",
            "itemtype": "method",
            "name": "getScanLineLengthForWidth",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 307,
            "description": "Determines if the data requires padding for scanlines",
            "itemtype": "method",
            "name": "hasScanLinePadding",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 317,
            "description": "Determines if the data requires padding for scanlines",
            "itemtype": "method",
            "name": "hasScanLinePaddingWithWidth",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 330,
            "description": "Determines position of scanline pixel",
            "itemtype": "method",
            "name": "scanLinePaddingAt",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 340,
            "description": "Determines position of scanline pixel with width",
            "itemtype": "method",
            "name": "scanLinePaddingAt",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 355,
            "description": "Gets the size of the image in bytes during edit-mode",
            "itemtype": "method",
            "name": "getImageSizeInBytes",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 365,
            "description": "Gets the number of bytes in a pixel for images after scaling",
            "itemtype": "method",
            "name": "getImageBytesPerPixel",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 376,
            "description": "Is the image of color-type \"Grayscale\"?",
            "itemtype": "method",
            "name": "isColorTypeGreyScale",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 386,
            "description": "Is the image of color-type \"True-color\"?",
            "itemtype": "method",
            "name": "isColorTypeTrueColor",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 396,
            "description": "Is the image of color-type \"Indexed-color\"?",
            "itemtype": "method",
            "name": "isColorTypeIndexedColor",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 406,
            "description": "Is the image of color-type \"Grayscale with alpha channel\"?",
            "itemtype": "method",
            "name": "isColorTypeGreyScaleWithAlpha",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 416,
            "description": "Is the image of color-type \"True-color with alpha channel\"?",
            "itemtype": "method",
            "name": "isColorTypeTrueColorWithAlpha",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 427,
            "description": "Parsing of chunk data\n\nPhase 1",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 476,
            "description": "Decoding of chunk data before scaling\n\nPhase 2",
            "itemtype": "method",
            "name": "decode",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Int[]"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Int[]"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 520,
            "description": "Decoding of chunk data after scaling\n\nPhase 3",
            "itemtype": "method",
            "name": "postDecode",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Int[]"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 545,
            "description": "Gathers chunk-data from decoded chunks\n\nPhase 5",
            "static": 1,
            "itemtype": "method",
            "name": "decodeData",
            "params": [
                {
                    "name": "data",
                    "description": "Data-object that will be used to export values",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 580,
            "description": "Combines all IDAT chunks into on buffer",
            "itemtype": "method",
            "name": "_combine",
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "access": "private",
            "tagname": "",
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 608,
            "description": "Returns a list of chunks to be added to the data-stream\n\nPhase 1",
            "static": 1,
            "itemtype": "method",
            "name": "encodeData",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "data",
                    "description": "Object that will be used to import data to the chunk",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 634,
            "description": "Before encoding of chunk data\n\nPhase 2\n\nNote:\nUse this method to gather image-data before scaling.",
            "itemtype": "method",
            "name": "preEncode",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 705,
            "description": "Encoding of chunk data\n\nPhase 3\n\nNote:\nUse this method to add data to the image after scaling.",
            "itemtype": "method",
            "name": "encode",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 737,
            "description": "Composing of chunk data\n\nPhase 4",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/IHDR.js",
            "line": 755,
            "description": "Separates buffer into multiple IDAT",
            "itemtype": "method",
            "name": "_separate",
            "params": [
                {
                    "name": "buffer",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "IHDR",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/PLTE.js",
            "line": 15,
            "description": "Gets the sequence",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "PLTE",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/PLTE.js",
            "line": 26,
            "description": "Searches the platte to find the index of a color",
            "itemtype": "method",
            "name": "findColor",
            "params": [
                {
                    "name": "color",
                    "description": "Color object with red, green, and blue components",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Int|null"
            },
            "class": "PLTE",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/PLTE.js",
            "line": 42,
            "description": "Creates a look-up table for faster finds",
            "itemtype": "method",
            "name": "_createLookUpTable",
            "access": "private",
            "tagname": "",
            "class": "PLTE",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/PLTE.js",
            "line": 61,
            "description": "Gets all colors at once",
            "itemtype": "method",
            "name": "getColors",
            "return": {
                "description": "",
                "type": "Object[]"
            },
            "class": "PLTE",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/PLTE.js",
            "line": 71,
            "description": "Sets all colors at once",
            "itemtype": "method",
            "name": "setColors",
            "params": [
                {
                    "name": "colors",
                    "description": "",
                    "type": "Object[]"
                }
            ],
            "class": "PLTE",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/PLTE.js",
            "line": 83,
            "description": "Parsing of chunk data\n\nPhase 1",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "PLTE",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/PLTE.js",
            "line": 122,
            "description": "Decoding of chunk data after scaling\n\nPhase 3",
            "itemtype": "method",
            "name": "postDecode",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Buffer"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "PLTE",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/PLTE.js",
            "line": 190,
            "description": "Gathers chunk-data from decoded chunks\n\nPhase 5",
            "static": 1,
            "itemtype": "method",
            "name": "decodeData",
            "params": [
                {
                    "name": "data",
                    "description": "Data-object that will be used to export values",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "PLTE",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/PLTE.js",
            "line": 218,
            "description": "Returns a list of chunks to be added to the data-stream\n\nPhase 1",
            "static": 1,
            "itemtype": "method",
            "name": "encodeData",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "data",
                    "description": "Object that will be used to import data to the chunk",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "PLTE",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/PLTE.js",
            "line": 243,
            "description": "Before encoding of chunk data\n\nPhase 2",
            "itemtype": "method",
            "name": "preEncode",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "PLTE",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/PLTE.js",
            "line": 290,
            "description": "Composing of chunk data\n\nPhase 4",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "PLTE",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/bKGD.js",
            "line": 17,
            "description": "Gets the sequence",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "bKGD",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- background {boolean} - Should this chunk be applied to the image? (default: false)"
        },
        {
            "file": "lib/png/chunks/bKGD.js",
            "line": 28,
            "description": "Gets the background color",
            "itemtype": "method",
            "name": "getColor",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "bKGD",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- background {boolean} - Should this chunk be applied to the image? (default: false)"
        },
        {
            "file": "lib/png/chunks/bKGD.js",
            "line": 42,
            "description": "Sets the background color",
            "itemtype": "method",
            "name": "setColor",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "bKGD",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- background {boolean} - Should this chunk be applied to the image? (default: false)"
        },
        {
            "file": "lib/png/chunks/bKGD.js",
            "line": 56,
            "description": "Parsing of chunk data\n\nPhase 1",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "bKGD",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- background {boolean} - Should this chunk be applied to the image? (default: false)"
        },
        {
            "file": "lib/png/chunks/bKGD.js",
            "line": 124,
            "description": "Decoding of chunk data after scaling\n\nPhase 3",
            "itemtype": "method",
            "name": "postDecode",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Buffer"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "background",
                            "description": "Apply background?",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "bKGD",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- background {boolean} - Should this chunk be applied to the image? (default: false)"
        },
        {
            "file": "lib/png/chunks/bKGD.js",
            "line": 193,
            "description": "Gathers chunk-data from decoded chunks\n\nPhase 5",
            "static": 1,
            "itemtype": "method",
            "name": "decodeData",
            "params": [
                {
                    "name": "data",
                    "description": "Data-object that will be used to export values",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "bKGD",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- background {boolean} - Should this chunk be applied to the image? (default: false)"
        },
        {
            "file": "lib/png/chunks/bKGD.js",
            "line": 221,
            "description": "Returns a list of chunks to be added to the data-stream\n\nPhase 1",
            "static": 1,
            "itemtype": "method",
            "name": "encodeData",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "data",
                    "description": "Object that will be used to import data to the chunk",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "bKGD",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- background {boolean} - Should this chunk be applied to the image? (default: false)"
        },
        {
            "file": "lib/png/chunks/bKGD.js",
            "line": 246,
            "description": "Composing of chunk data\n\nPhase 4",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "bKGD",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- background {boolean} - Should this chunk be applied to the image? (default: false)"
        },
        {
            "file": "lib/png/chunks/cHRM.js",
            "line": 11,
            "description": "Gets the sequence",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "cHRM",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/cHRM.js",
            "line": 22,
            "description": "Gets the white-point x value",
            "itemtype": "method",
            "name": "getWhitePointX",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "cHRM",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/cHRM.js",
            "line": 32,
            "description": "Sets the white-point x value",
            "itemtype": "method",
            "name": "setWhitePointX",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Float"
                }
            ],
            "class": "cHRM",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/cHRM.js",
            "line": 43,
            "description": "Gets the white-point y value",
            "itemtype": "method",
            "name": "getWhitePointY",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "cHRM",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/cHRM.js",
            "line": 53,
            "description": "Sets the white-point y value",
            "itemtype": "method",
            "name": "setWhitePointY",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Float"
                }
            ],
            "class": "cHRM",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/cHRM.js",
            "line": 64,
            "description": "Gets the red x value",
            "itemtype": "method",
            "name": "getRedX",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "cHRM",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/cHRM.js",
            "line": 74,
            "description": "Sets the red x value",
            "itemtype": "method",
            "name": "setRedX",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Float"
                }
            ],
            "class": "cHRM",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/cHRM.js",
            "line": 85,
            "description": "Gets the red y value",
            "itemtype": "method",
            "name": "getRedY",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "cHRM",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/cHRM.js",
            "line": 95,
            "description": "Sets the red y value",
            "itemtype": "method",
            "name": "setRedY",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Float"
                }
            ],
            "class": "cHRM",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/cHRM.js",
            "line": 106,
            "description": "Gets the green x value",
            "itemtype": "method",
            "name": "getGreenX",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "cHRM",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/cHRM.js",
            "line": 116,
            "description": "Sets the green x value",
            "itemtype": "method",
            "name": "setGreenX",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Float"
                }
            ],
            "class": "cHRM",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/cHRM.js",
            "line": 127,
            "description": "Gets the green y value",
            "itemtype": "method",
            "name": "getGreenY",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "cHRM",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/cHRM.js",
            "line": 137,
            "description": "Sets the green y value",
            "itemtype": "method",
            "name": "setGreenY",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Float"
                }
            ],
            "class": "cHRM",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/cHRM.js",
            "line": 148,
            "description": "Gets the blue x value",
            "itemtype": "method",
            "name": "getBlueX",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "cHRM",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/cHRM.js",
            "line": 158,
            "description": "Sets the blue x value",
            "itemtype": "method",
            "name": "setBlueX",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Float"
                }
            ],
            "class": "cHRM",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/cHRM.js",
            "line": 169,
            "description": "Gets the blue y value",
            "itemtype": "method",
            "name": "getBlueY",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "cHRM",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/cHRM.js",
            "line": 179,
            "description": "Sets the blue y value",
            "itemtype": "method",
            "name": "setBlueY",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Float"
                }
            ],
            "class": "cHRM",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/cHRM.js",
            "line": 190,
            "description": "Parsing of chunk data\n\nPhase 1",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "cHRM",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/cHRM.js",
            "line": 222,
            "description": "Gathers chunk-data from decoded chunks\n\nPhase 5",
            "static": 1,
            "itemtype": "method",
            "name": "decodeData",
            "params": [
                {
                    "name": "data",
                    "description": "Data-object that will be used to export values",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "cHRM",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/cHRM.js",
            "line": 259,
            "description": "Returns a list of chunks to be added to the data-stream\n\nPhase 1",
            "static": 1,
            "itemtype": "method",
            "name": "encodeData",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "data",
                    "description": "Object that will be used to import data to the chunk",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "cHRM",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/cHRM.js",
            "line": 307,
            "description": "Composing of chunk data\n\nPhase 4",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "cHRM",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/gAMA.js",
            "line": 16,
            "description": "Gets the sequence",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "gAMA",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- gamma {boolean} - Should this chunk be applied to the image? (default: false)"
        },
        {
            "file": "lib/png/chunks/gAMA.js",
            "line": 27,
            "description": "Gets the gamma value",
            "itemtype": "method",
            "name": "getGamma",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "gAMA",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- gamma {boolean} - Should this chunk be applied to the image? (default: false)"
        },
        {
            "file": "lib/png/chunks/gAMA.js",
            "line": 37,
            "description": "Sets the gamma value",
            "itemtype": "method",
            "name": "setGamma",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Float"
                }
            ],
            "class": "gAMA",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- gamma {boolean} - Should this chunk be applied to the image? (default: false)"
        },
        {
            "file": "lib/png/chunks/gAMA.js",
            "line": 48,
            "description": "Parsing of chunk data\n\nPhase 1",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "gAMA",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- gamma {boolean} - Should this chunk be applied to the image? (default: false)"
        },
        {
            "file": "lib/png/chunks/gAMA.js",
            "line": 73,
            "description": "Decoding of chunk data after image complete\n\nPhase 4",
            "itemtype": "method",
            "name": "finalizeDecode",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Buffer"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "gamma",
                            "description": "Apply gamma?",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "gAMA",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- gamma {boolean} - Should this chunk be applied to the image? (default: false)"
        },
        {
            "file": "lib/png/chunks/gAMA.js",
            "line": 129,
            "description": "Gathers chunk-data from decoded chunks\n\nPhase 5",
            "static": 1,
            "itemtype": "method",
            "name": "decodeData",
            "params": [
                {
                    "name": "data",
                    "description": "Data-object that will be used to export values",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "gAMA",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- gamma {boolean} - Should this chunk be applied to the image? (default: false)"
        },
        {
            "file": "lib/png/chunks/gAMA.js",
            "line": 157,
            "description": "Returns a list of chunks to be added to the data-stream\n\nPhase 1",
            "static": 1,
            "itemtype": "method",
            "name": "encodeData",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "data",
                    "description": "Object that will be used to import data to the chunk",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "gAMA",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- gamma {boolean} - Should this chunk be applied to the image? (default: false)"
        },
        {
            "file": "lib/png/chunks/gAMA.js",
            "line": 182,
            "description": "Composing of chunk data\n\nPhase 4",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "gAMA",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- gamma {boolean} - Should this chunk be applied to the image? (default: false)"
        },
        {
            "file": "lib/png/chunks/hIST.js",
            "line": 11,
            "description": "Gets the sequence",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "hIST",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/hIST.js",
            "line": 22,
            "description": "Gets all frequencies at once",
            "itemtype": "method",
            "name": "getFrequencies",
            "return": {
                "description": "List of all frequencies in order of the palette color indexes",
                "type": "Int[]"
            },
            "class": "hIST",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/hIST.js",
            "line": 38,
            "description": "Sets all frequencies at once",
            "itemtype": "method",
            "name": "setFrequencies",
            "params": [
                {
                    "name": "frequencies",
                    "description": "List of all frequencies in order of the palette color indexes",
                    "type": "Int[]"
                }
            ],
            "class": "hIST",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/hIST.js",
            "line": 54,
            "description": "Parsing of chunk data\n\nPhase 1",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "hIST",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/hIST.js",
            "line": 75,
            "description": "Gathers chunk-data from decoded chunks\n\nPhase 5",
            "static": 1,
            "itemtype": "method",
            "name": "decodeData",
            "params": [
                {
                    "name": "data",
                    "description": "Data-object that will be used to export values",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "hIST",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/hIST.js",
            "line": 103,
            "description": "Returns a list of chunks to be added to the data-stream\n\nPhase 1",
            "static": 1,
            "itemtype": "method",
            "name": "encodeData",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "data",
                    "description": "Object that will be used to import data to the chunk",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "hIST",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/hIST.js",
            "line": 128,
            "description": "Composing of chunk data\n\nPhase 4",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "hIST",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/iCCP.js",
            "line": 15,
            "description": "Gets the sequence",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "iCCP",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/iCCP.js",
            "line": 26,
            "description": "Gets the profile-name",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "iCCP",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/iCCP.js",
            "line": 36,
            "description": "Sets the profile-name",
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "iCCP",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/iCCP.js",
            "line": 57,
            "description": "Gets the profile",
            "itemtype": "method",
            "name": "getProfile",
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "iCCP",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/iCCP.js",
            "line": 67,
            "description": "Sets the profile",
            "itemtype": "method",
            "name": "setProfile",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "class": "iCCP",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/iCCP.js",
            "line": 78,
            "description": "Parsing of chunk data\n\nPhase 1",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "iCCP",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/iCCP.js",
            "line": 131,
            "description": "Gathers chunk-data from decoded chunks\n\nPhase 5",
            "static": 1,
            "itemtype": "method",
            "name": "decodeData",
            "params": [
                {
                    "name": "data",
                    "description": "Data-object that will be used to export values",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "iCCP",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/iCCP.js",
            "line": 162,
            "description": "Returns a list of chunks to be added to the data-stream\n\nPhase 1",
            "static": 1,
            "itemtype": "method",
            "name": "encodeData",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "data",
                    "description": "Object that will be used to import data to the chunk",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "iCCP",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/iCCP.js",
            "line": 188,
            "description": "Composing of chunk data\n\nPhase 4",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "iCCP",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/iTXt.js",
            "line": 11,
            "description": "Gets the sequence",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "iTXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/iTXt.js",
            "line": 22,
            "description": "Parsing of chunk data\n\nPhase 1",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "iTXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/iTXt.js",
            "line": 37,
            "description": "Gathers chunk-data from decoded chunks\n\nPhase 5",
            "static": 1,
            "itemtype": "method",
            "name": "decodeData",
            "params": [
                {
                    "name": "data",
                    "description": "Data-object that will be used to export values",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "iTXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/iTXt.js",
            "line": 53,
            "description": "Returns a list of chunks to be added to the data-stream\n\nPhase 1",
            "static": 1,
            "itemtype": "method",
            "name": "encodeData",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "data",
                    "description": "Object that will be used to import data to the chunk",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "iTXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/iTXt.js",
            "line": 69,
            "description": "Composing of chunk data\n\nPhase 4",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "iTXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/pHYs.js",
            "line": 13,
            "description": "Gets the sequence",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "pHYs",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/pHYs.js",
            "line": 24,
            "description": "Gets the horizontal number of pixel per unit",
            "itemtype": "method",
            "name": "getXPixelPerUnit",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "pHYs",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/pHYs.js",
            "line": 34,
            "description": "Sets the horizontal number of pixel per unit",
            "itemtype": "method",
            "name": "setXPixelPerUnit",
            "params": [
                {
                    "name": "ppu",
                    "description": "Pixel per unit",
                    "type": "Int"
                }
            ],
            "class": "pHYs",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/pHYs.js",
            "line": 45,
            "description": "Gets the vertical number of pixel per unit",
            "itemtype": "method",
            "name": "getYPixelPerUnit",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "pHYs",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/pHYs.js",
            "line": 55,
            "description": "Sets the vertical number of pixel per unit",
            "itemtype": "method",
            "name": "setYPixelPerUnit",
            "params": [
                {
                    "name": "ppu",
                    "description": "Pixel per unit",
                    "type": "Int"
                }
            ],
            "class": "pHYs",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/pHYs.js",
            "line": 66,
            "description": "Gets the unit identifier",
            "itemtype": "method",
            "name": "getUnit",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "pHYs",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/pHYs.js",
            "line": 76,
            "description": "Sets the unit identifier",
            "itemtype": "method",
            "name": "setUnit",
            "params": [
                {
                    "name": "unit",
                    "description": "Unit identifier",
                    "type": "Int"
                }
            ],
            "class": "pHYs",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/pHYs.js",
            "line": 90,
            "description": "Is unit unknown?",
            "itemtype": "method",
            "name": "isUnitUnknown",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "pHYs",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/pHYs.js",
            "line": 100,
            "description": "Is unit in meter?",
            "itemtype": "method",
            "name": "isUnitInMeter",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "pHYs",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/pHYs.js",
            "line": 111,
            "description": "Parsing of chunk data\n\nPhase 1",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "pHYs",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/pHYs.js",
            "line": 138,
            "description": "Gathers chunk-data from decoded chunks\n\nPhase 5",
            "static": 1,
            "itemtype": "method",
            "name": "decodeData",
            "params": [
                {
                    "name": "data",
                    "description": "Data-object that will be used to export values",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "pHYs",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/pHYs.js",
            "line": 169,
            "description": "Returns a list of chunks to be added to the data-stream\n\nPhase 1",
            "static": 1,
            "itemtype": "method",
            "name": "encodeData",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "data",
                    "description": "Object that will be used to import data to the chunk",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "pHYs",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/pHYs.js",
            "line": 202,
            "description": "Composing of chunk data\n\nPhase 4",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "pHYs",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/sBIT.js",
            "line": 11,
            "description": "Gets the sequence",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "sBIT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/sBIT.js",
            "line": 22,
            "description": "Parsing of chunk data\n\nPhase 1",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "sBIT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/sBIT.js",
            "line": 43,
            "description": "Gathers chunk-data from decoded chunks\n\nPhase 5",
            "static": 1,
            "itemtype": "method",
            "name": "decodeData",
            "params": [
                {
                    "name": "data",
                    "description": "Data-object that will be used to export values",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "sBIT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/sBIT.js",
            "line": 60,
            "description": "Returns a list of chunks to be added to the data-stream\n\nPhase 1",
            "static": 1,
            "itemtype": "method",
            "name": "encodeData",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "data",
                    "description": "Object that will be used to import data to the chunk",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "sBIT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/sBIT.js",
            "line": 76,
            "description": "Composing of chunk data\n\nPhase 4",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "sBIT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/sPLT.js",
            "line": 11,
            "description": "Gets the sequence",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "sPLT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/sPLT.js",
            "line": 22,
            "description": "Parsing of chunk data\n\nPhase 1",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "sPLT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/sPLT.js",
            "line": 37,
            "description": "Gathers chunk-data from decoded chunks\n\nPhase 5",
            "static": 1,
            "itemtype": "method",
            "name": "decodeData",
            "params": [
                {
                    "name": "data",
                    "description": "Data-object that will be used to export values",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "sPLT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/sPLT.js",
            "line": 54,
            "description": "Returns a list of chunks to be added to the data-stream\n\nPhase 1",
            "static": 1,
            "itemtype": "method",
            "name": "encodeData",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "data",
                    "description": "Object that will be used to import data to the chunk",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "sPLT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/sPLT.js",
            "line": 70,
            "description": "Composing of chunk data\n\nPhase 4",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "sPLT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/sRGB.js",
            "line": 13,
            "description": "Gets the sequence",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "sRGB",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/sRGB.js",
            "line": 24,
            "description": "Gets the rendering intent identifier",
            "itemtype": "method",
            "name": "getRenderingIntent",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "sRGB",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/sRGB.js",
            "line": 34,
            "description": "Sets the rendering intent identifier",
            "itemtype": "method",
            "name": "setRenderingIntent",
            "params": [
                {
                    "name": "intent",
                    "description": "",
                    "type": "Int"
                }
            ],
            "class": "sRGB",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/sRGB.js",
            "line": 50,
            "description": "Is the rendering intent perceptual?",
            "itemtype": "method",
            "name": "isPerceptual",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "sRGB",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/sRGB.js",
            "line": 60,
            "description": "Is the rendering intent relative colorimetric?",
            "itemtype": "method",
            "name": "isRelativeColorimetric",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "sRGB",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/sRGB.js",
            "line": 70,
            "description": "Is the rendering intent saturation?",
            "itemtype": "method",
            "name": "isSaturation",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "sRGB",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/sRGB.js",
            "line": 80,
            "description": "Is the rendering intent absolute colorimetric?",
            "itemtype": "method",
            "name": "isAbsoluteColorimetric",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "sRGB",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/sRGB.js",
            "line": 91,
            "description": "Parsing of chunk data\n\nPhase 1",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "sRGB",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/sRGB.js",
            "line": 116,
            "description": "Gathers chunk-data from decoded chunks\n\nPhase 5",
            "static": 1,
            "itemtype": "method",
            "name": "decodeData",
            "params": [
                {
                    "name": "data",
                    "description": "Data-object that will be used to export values",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "sRGB",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/sRGB.js",
            "line": 144,
            "description": "Returns a list of chunks to be added to the data-stream\n\nPhase 1",
            "static": 1,
            "itemtype": "method",
            "name": "encodeData",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "data",
                    "description": "Object that will be used to import data to the chunk",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "sRGB",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/sRGB.js",
            "line": 169,
            "description": "Composing of chunk data\n\nPhase 4",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "sRGB",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/tEXt.js",
            "line": 14,
            "description": "Gets the sequence",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "tEXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/tEXt.js",
            "line": 25,
            "description": "Gets the keyword",
            "itemtype": "method",
            "name": "getKeyword",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "tEXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/tEXt.js",
            "line": 35,
            "description": "Sets the keyword",
            "itemtype": "method",
            "name": "setKeyword",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "tEXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/tEXt.js",
            "line": 56,
            "description": "Gets the text",
            "itemtype": "method",
            "name": "getText",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "tEXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/tEXt.js",
            "line": 66,
            "description": "Sets the text",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "tEXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/tEXt.js",
            "line": 77,
            "description": "Parsing of chunk data\n\nPhase 1",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "tEXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/tEXt.js",
            "line": 120,
            "description": "Gathers chunk-data from decoded chunks\n\nPhase 5",
            "static": 1,
            "itemtype": "method",
            "name": "decodeData",
            "params": [
                {
                    "name": "data",
                    "description": "Data-object that will be used to export values",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "tEXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/tEXt.js",
            "line": 150,
            "description": "Returns a list of chunks to be added to the data-stream\n\nPhase 1",
            "static": 1,
            "itemtype": "method",
            "name": "encodeData",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "data",
                    "description": "Object that will be used to import data to the chunk",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "tEXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/tEXt.js",
            "line": 191,
            "description": "Composing of chunk data\n\nPhase 4",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "tEXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/tIME.js",
            "line": 11,
            "description": "Gets the sequence",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "tIME",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/tIME.js",
            "line": 22,
            "description": "Gets the date",
            "itemtype": "method",
            "name": "getDate",
            "return": {
                "description": "",
                "type": "Date"
            },
            "class": "tIME",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/tIME.js",
            "line": 32,
            "description": "Sets the date",
            "itemtype": "method",
            "name": "setDate",
            "params": [
                {
                    "name": "date",
                    "description": "",
                    "type": "Date"
                }
            ],
            "class": "tIME",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/tIME.js",
            "line": 43,
            "description": "Parsing of chunk data\n\nPhase 1",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "tIME",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/tIME.js",
            "line": 77,
            "description": "Gathers chunk-data from decoded chunks\n\nPhase 5",
            "static": 1,
            "itemtype": "method",
            "name": "decodeData",
            "params": [
                {
                    "name": "data",
                    "description": "Data-object that will be used to export values",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "tIME",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/tIME.js",
            "line": 105,
            "description": "Returns a list of chunks to be added to the data-stream\n\nPhase 1",
            "static": 1,
            "itemtype": "method",
            "name": "encodeData",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "data",
                    "description": "Object that will be used to import data to the chunk",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "tIME",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/tIME.js",
            "line": 130,
            "description": "Composing of chunk data\n\nPhase 4",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "tIME",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/tRNS.js",
            "line": 16,
            "description": "Gets the sequence",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "tRNS",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- transparent {boolean} - Should this chunk be applied to the image? (default: true)"
        },
        {
            "file": "lib/png/chunks/tRNS.js",
            "line": 27,
            "description": "Searches the alpha values of a color",
            "itemtype": "method",
            "name": "findAlpha",
            "params": [
                {
                    "name": "red",
                    "description": "",
                    "type": "Int"
                },
                {
                    "name": "green",
                    "description": "",
                    "type": "Int"
                },
                {
                    "name": "blue",
                    "description": "",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Int|null"
            },
            "class": "tRNS",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- transparent {boolean} - Should this chunk be applied to the image? (default: true)"
        },
        {
            "file": "lib/png/chunks/tRNS.js",
            "line": 45,
            "description": "Creates a look-up table for faster finds",
            "itemtype": "method",
            "name": "_createLookUpTable",
            "access": "private",
            "tagname": "",
            "class": "tRNS",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- transparent {boolean} - Should this chunk be applied to the image? (default: true)"
        },
        {
            "file": "lib/png/chunks/tRNS.js",
            "line": 65,
            "description": "Gets all transparent colors",
            "itemtype": "method",
            "name": "getColors",
            "return": {
                "description": "",
                "type": "Object[]"
            },
            "class": "tRNS",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- transparent {boolean} - Should this chunk be applied to the image? (default: true)"
        },
        {
            "file": "lib/png/chunks/tRNS.js",
            "line": 75,
            "description": "Sets all transparent colors",
            "itemtype": "method",
            "name": "setColors",
            "return": {
                "description": "",
                "type": "Object[]"
            },
            "class": "tRNS",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- transparent {boolean} - Should this chunk be applied to the image? (default: true)"
        },
        {
            "file": "lib/png/chunks/tRNS.js",
            "line": 87,
            "description": "Parsing of chunk data\n\nPhase 1",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "tRNS",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- transparent {boolean} - Should this chunk be applied to the image? (default: true)"
        },
        {
            "file": "lib/png/chunks/tRNS.js",
            "line": 178,
            "description": "Decoding of chunk data before scaling\n\nPhase 2",
            "itemtype": "method",
            "name": "decode",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Int[]"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "transparent",
                            "description": "Apply transparency?",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Int[]"
            },
            "class": "tRNS",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- transparent {boolean} - Should this chunk be applied to the image? (default: true)"
        },
        {
            "file": "lib/png/chunks/tRNS.js",
            "line": 239,
            "description": "Gathers chunk-data from decoded chunks\n\nPhase 5",
            "static": 1,
            "itemtype": "method",
            "name": "decodeData",
            "params": [
                {
                    "name": "data",
                    "description": "Data-object that will be used to export values",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "tRNS",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- transparent {boolean} - Should this chunk be applied to the image? (default: true)"
        },
        {
            "file": "lib/png/chunks/tRNS.js",
            "line": 267,
            "description": "Returns a list of chunks to be added to the data-stream\n\nPhase 1",
            "static": 1,
            "itemtype": "method",
            "name": "encodeData",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "data",
                    "description": "Object that will be used to import data to the chunk",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "tRNS",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- transparent {boolean} - Should this chunk be applied to the image? (default: true)"
        },
        {
            "file": "lib/png/chunks/tRNS.js",
            "line": 292,
            "description": "Composing of chunk data\n\nPhase 4",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "tRNS",
            "module": "PNG",
            "submodule": "PNGChunks\n\nOptions:\n- transparent {boolean} - Should this chunk be applied to the image? (default: true)"
        },
        {
            "file": "lib/png/chunks/zTXt.js",
            "line": 15,
            "description": "Gets the sequence",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "zTXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/zTXt.js",
            "line": 26,
            "description": "Gets the keyword",
            "itemtype": "method",
            "name": "getKeyword",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "zTXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/zTXt.js",
            "line": 36,
            "description": "Sets the keyword",
            "itemtype": "method",
            "name": "setKeyword",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "zTXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/zTXt.js",
            "line": 57,
            "description": "Gets the text",
            "itemtype": "method",
            "name": "getText",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "zTXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/zTXt.js",
            "line": 67,
            "description": "Sets the text",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "zTXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/zTXt.js",
            "line": 78,
            "description": "Parsing of chunk data\n\nPhase 1",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "zTXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/zTXt.js",
            "line": 137,
            "description": "Gathers chunk-data from decoded chunks\n\nPhase 5",
            "static": 1,
            "itemtype": "method",
            "name": "decodeData",
            "params": [
                {
                    "name": "data",
                    "description": "Data-object that will be used to export values",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "zTXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/zTXt.js",
            "line": 167,
            "description": "Returns a list of chunks to be added to the data-stream\n\nPhase 1",
            "static": 1,
            "itemtype": "method",
            "name": "encodeData",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "data",
                    "description": "Object that will be used to import data to the chunk",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "zTXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/chunks/zTXt.js",
            "line": 208,
            "description": "Composing of chunk data\n\nPhase 4",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "zTXt",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/jsOn.js",
            "line": 16,
            "description": "Gets the sequence",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "jsOn",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/jsOn.js",
            "line": 27,
            "description": "Gets the keyword of the JSON data",
            "itemtype": "method",
            "name": "getKeyword",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "jsOn",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/jsOn.js",
            "line": 37,
            "description": "Sets the keyword of the JSON data",
            "itemtype": "method",
            "name": "setKeyword",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "jsOn",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/jsOn.js",
            "line": 47,
            "description": "Gets the data content",
            "itemtype": "method",
            "name": "getContent",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "jsOn",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/jsOn.js",
            "line": 57,
            "description": "Sets the data content",
            "itemtype": "method",
            "name": "setContent",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "jsOn",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/jsOn.js",
            "line": 68,
            "description": "Parsing of chunk data\n\nPhase 1",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "jsOn",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/jsOn.js",
            "line": 125,
            "description": "Gathers chunk-data from decoded chunks\n\nPhase 5",
            "static": 1,
            "itemtype": "method",
            "name": "decodeData",
            "params": [
                {
                    "name": "data",
                    "description": "Data-object that will be used to export values",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "jsOn",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/jsOn.js",
            "line": 155,
            "description": "Returns a list of chunks to be added to the data-stream\n\nPhase 1",
            "static": 1,
            "itemtype": "method",
            "name": "encodeData",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "data",
                    "description": "Object that will be used to import data to the chunk",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "jsOn",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/jsOn.js",
            "line": 191,
            "description": "Composing of chunk data\n\nPhase 4",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "jsOn",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/stRT.js",
            "line": 16,
            "description": "Gets the sequence",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "stRT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/stRT.js",
            "line": 27,
            "description": "Gets the type of the structural data",
            "itemtype": "method",
            "name": "getDataType",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "stRT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/stRT.js",
            "line": 37,
            "description": "Sets the type of the structural data",
            "itemtype": "method",
            "name": "setDataType",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "stRT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/stRT.js",
            "line": 51,
            "description": "Gets the major version",
            "itemtype": "method",
            "name": "getMajor",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "stRT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/stRT.js",
            "line": 61,
            "description": "Sets the major version",
            "itemtype": "method",
            "name": "setMajor",
            "params": [
                {
                    "name": "major",
                    "description": "",
                    "type": "Int"
                }
            ],
            "class": "stRT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/stRT.js",
            "line": 75,
            "description": "Gets the minor version",
            "itemtype": "method",
            "name": "getMinor",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "stRT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/stRT.js",
            "line": 85,
            "description": "Sets the minor version",
            "itemtype": "method",
            "name": "setMinor",
            "params": [
                {
                    "name": "minor",
                    "description": "",
                    "type": "Int"
                }
            ],
            "class": "stRT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/stRT.js",
            "line": 99,
            "description": "Gets the data content",
            "itemtype": "method",
            "name": "getContent",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "stRT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/stRT.js",
            "line": 109,
            "description": "Sets the data content",
            "itemtype": "method",
            "name": "setContent",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "stRT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/stRT.js",
            "line": 120,
            "description": "Parsing of chunk data\n\nPhase 1",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "stRT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/stRT.js",
            "line": 161,
            "description": "Gathers chunk-data from decoded chunks\n\nPhase 5",
            "static": 1,
            "itemtype": "method",
            "name": "decodeData",
            "params": [
                {
                    "name": "data",
                    "description": "Data-object that will be used to export values",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "stRT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/stRT.js",
            "line": 194,
            "description": "Returns a list of chunks to be added to the data-stream\n\nPhase 1",
            "static": 1,
            "itemtype": "method",
            "name": "encodeData",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "data",
                    "description": "Object that will be used to import data to the chunk",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "stRT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/stRT.js",
            "line": 240,
            "description": "Composing of chunk data\n\nPhase 4",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "stRT",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/zzZz.js",
            "line": 15,
            "description": "Gets the sequence",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "zzZz",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/zzZz.js",
            "line": 26,
            "description": "Gets the internal chunk-type",
            "itemtype": "method",
            "name": "getInternalType",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "zzZz",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/zzZz.js",
            "line": 36,
            "description": "Sets the internal chunk-type",
            "itemtype": "method",
            "name": "setInternalType",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "zzZz",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/zzZz.js",
            "line": 47,
            "description": "Gets the data buffer",
            "itemtype": "method",
            "name": "getBuffer",
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "zzZz",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/zzZz.js",
            "line": 60,
            "description": "Sets the data buffer",
            "itemtype": "method",
            "name": "setBuffer",
            "params": [
                {
                    "name": "buffer",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "class": "zzZz",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/zzZz.js",
            "line": 71,
            "description": "Parsing of chunk data\n\nPhase 1",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "zzZz",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/zzZz.js",
            "line": 86,
            "description": "Gathers chunk-data from decoded chunks\n\nPhase 5",
            "static": 1,
            "itemtype": "method",
            "name": "decodeData",
            "params": [
                {
                    "name": "data",
                    "description": "Data-object that will be used to export values",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "zzZz",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/zzZz.js",
            "line": 130,
            "description": "Returns a list of chunks to be added to the data-stream\n\nPhase 1",
            "static": 1,
            "itemtype": "method",
            "name": "encodeData",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "data",
                    "description": "Object that will be used to import data to the chunk",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "zzZz",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/custom/zzZz.js",
            "line": 170,
            "description": "Composing of chunk data\n\nPhase 4",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "zzZz",
            "module": "PNG",
            "submodule": "PNGChunks"
        },
        {
            "file": "lib/png/processor/compressor.js",
            "line": 17,
            "description": "Gets the options",
            "itemtype": "method",
            "name": "getOptions",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Compressor",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/compressor.js",
            "line": 28,
            "description": "Compresses data",
            "itemtype": "method",
            "name": "compress",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "Compressor",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/compressor.js",
            "line": 43,
            "description": "Decompresses data",
            "itemtype": "method",
            "name": "decompress",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "Compressor",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/crc.js",
            "line": 7,
            "description": "Creates a CRC table to speed-up the algorithm",
            "createcrctable": "",
            "return": {
                "description": "",
                "type": "Int[]"
            },
            "access": "private",
            "tagname": "",
            "class": "CRC",
            "module": "PNG"
        },
        {
            "file": "lib/png/processor/crc.js",
            "line": 39,
            "description": "Pre-calculated CRC table",
            "static": 1,
            "type": "{int[]}",
            "class": "CRC",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/crc.js",
            "line": 48,
            "description": "Writes data to the CRC algorithm",
            "itemtype": "method",
            "name": "write",
            "params": [
                {
                    "name": "data",
                    "description": "Data to be written",
                    "type": "Buffer"
                },
                {
                    "name": "offset",
                    "description": "Offset to start reading from",
                    "type": "Int"
                },
                {
                    "name": "length",
                    "description": "Length in bytes of the data",
                    "type": "Int"
                }
            ],
            "class": "CRC",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/crc.js",
            "line": 70,
            "description": "Gets the current CRC value",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CRC",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/filter.js",
            "line": 18,
            "description": "Gets the header chunk",
            "itemtype": "method",
            "name": "getHeaderChunk",
            "return": {
                "description": "",
                "type": "Chunk"
            },
            "class": "Filter",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/filter.js",
            "line": 29,
            "description": "Applies filters to the data",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "Filter",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/filter.js",
            "line": 40,
            "description": "Applies filters to the data",
            "itemtype": "method",
            "name": "_filter",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "access": "private",
            "tagname": "",
            "class": "Filter",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/filter.js",
            "line": 85,
            "description": "Applies no filter at all - this is just a pass-through",
            "itemtype": "method",
            "name": "_filterNone",
            "params": [
                {
                    "name": "input",
                    "description": "Input data",
                    "type": "Object"
                },
                {
                    "name": "output",
                    "description": "Output data",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Filter",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/filter.js",
            "line": 98,
            "description": "Applies the Sub filter",
            "itemtype": "method",
            "name": "_filterSub",
            "params": [
                {
                    "name": "input",
                    "description": "Input data",
                    "type": "Object"
                },
                {
                    "name": "output",
                    "description": "Output data",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Filter",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/filter.js",
            "line": 113,
            "description": "Applies the Up filter",
            "itemtype": "method",
            "name": "_filterUp",
            "params": [
                {
                    "name": "input",
                    "description": "Input data",
                    "type": "Object"
                },
                {
                    "name": "output",
                    "description": "Output data",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Filter",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/filter.js",
            "line": 128,
            "description": "Applies the Average filter",
            "itemtype": "method",
            "name": "_filterAverage",
            "params": [
                {
                    "name": "input",
                    "description": "Input data",
                    "type": "Object"
                },
                {
                    "name": "output",
                    "description": "Output data",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Filter",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/filter.js",
            "line": 143,
            "description": "Applies the Paeth filter",
            "itemtype": "method",
            "name": "_filterPaeth",
            "params": [
                {
                    "name": "input",
                    "description": "Input data",
                    "type": "Object"
                },
                {
                    "name": "output",
                    "description": "Output data",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Filter",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/filter.js",
            "line": 165,
            "description": "Reverses all filters",
            "itemtype": "method",
            "name": "reverse",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "Reversed data",
                "type": "Buffer"
            },
            "class": "Filter",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/filter.js",
            "line": 216,
            "description": "Reverses all filters",
            "itemtype": "method",
            "name": "_reverse",
            "params": [
                {
                    "name": "info",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Filter",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/filter.js",
            "line": 256,
            "description": "Reverses nothing at all - this is just a pass-through",
            "itemtype": "method",
            "name": "_reverseNone",
            "params": [
                {
                    "name": "info",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Filter",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/filter.js",
            "line": 267,
            "description": "Reverses the Sub filter",
            "itemtype": "method",
            "name": "_reverseSub",
            "params": [
                {
                    "name": "info",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Filter",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/filter.js",
            "line": 280,
            "description": "Reverses the Up filter",
            "itemtype": "method",
            "name": "_reverseUp",
            "params": [
                {
                    "name": "info",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Filter",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/filter.js",
            "line": 293,
            "description": "Reverses the Average filter",
            "itemtype": "method",
            "name": "_reverseAverage",
            "params": [
                {
                    "name": "info",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Filter",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/filter.js",
            "line": 306,
            "description": "Reverses the Paeth filter",
            "itemtype": "method",
            "name": "_reversePaeth",
            "params": [
                {
                    "name": "info",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Filter",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/filter.js",
            "line": 325,
            "description": "Paeth-predictor algorithm",
            "itemtype": "method",
            "name": "_paethPredictor",
            "params": [
                {
                    "name": "left",
                    "description": "Left pixel",
                    "type": "Int"
                },
                {
                    "name": "top",
                    "description": "Top pixel",
                    "type": "Int"
                },
                {
                    "name": "topLeft",
                    "description": "Top-left pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Result of algorithm",
                "type": "Int"
            },
            "access": "private",
            "tagname": "",
            "class": "Filter",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/filter.js",
            "line": 354,
            "description": "Gets the current pixel",
            "itemtype": "method",
            "name": "_getPixel",
            "params": [
                {
                    "name": "info",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "x",
                    "description": "X-coordinate in current scanline",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Int"
            },
            "access": "private",
            "tagname": "",
            "class": "Filter",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/filter.js",
            "line": 367,
            "description": "Gets the pixel at the left from the current pixel",
            "itemtype": "method",
            "name": "_getLeftPixel",
            "params": [
                {
                    "name": "info",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "x",
                    "description": "X-coordinate in current scanline",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Int"
            },
            "access": "private",
            "tagname": "",
            "class": "Filter",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/filter.js",
            "line": 380,
            "description": "Gets the pixel at the top from the current pixel",
            "itemtype": "method",
            "name": "_getTopPixel",
            "params": [
                {
                    "name": "info",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "x",
                    "description": "X-coordinate in current scanline",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Int"
            },
            "access": "private",
            "tagname": "",
            "class": "Filter",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/filter.js",
            "line": 393,
            "description": "Gets the pixel at the top-left from the current pixel",
            "itemtype": "method",
            "name": "_getTopLeftPixel",
            "params": [
                {
                    "name": "info",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "x",
                    "description": "X-coordinate in current scanline",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Int"
            },
            "access": "private",
            "tagname": "",
            "class": "Filter",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/interlace.js",
            "line": 18,
            "description": "Gets the header chunk",
            "itemtype": "method",
            "name": "getHeaderChunk",
            "return": {
                "description": "",
                "type": "Chunk"
            },
            "class": "Interlace",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/interlace.js",
            "line": 29,
            "description": "Applies the interlace encoding",
            "itemtype": "method",
            "name": "interlace",
            "params": [
                {
                    "name": "data",
                    "description": "Image data",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "Interlaces image data",
                "type": "Buffer"
            },
            "class": "Interlace",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/interlace.js",
            "line": 51,
            "description": "Reverses the interlace encoding",
            "itemtype": "method",
            "name": "reverse",
            "params": [
                {
                    "name": "data",
                    "description": "Image data",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "Plain image data",
                "type": "Buffer"
            },
            "class": "Interlace",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/interlace.js",
            "line": 74,
            "description": "Applies the adam-7 algorithm to the supplied data",
            "itemtype": "method",
            "name": "_adam7",
            "params": [
                {
                    "name": "data",
                    "description": "Input data",
                    "type": "Buffer"
                },
                {
                    "name": "width",
                    "description": "Width of image",
                    "type": "Int"
                },
                {
                    "name": "height",
                    "description": "Height of image",
                    "type": "Int"
                },
                {
                    "name": "revert",
                    "description": "Should adam-7 be reverted? Otherwise applies it.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "access": "private",
            "tagname": "",
            "class": "Interlace",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/interlace.js",
            "line": 122,
            "description": "Processes scanlines according to the interlace mode",
            "itemtype": "method",
            "name": "processPasses",
            "params": [
                {
                    "name": "cb",
                    "description": "Function that will be called for each pass",
                    "type": "Function"
                }
            ],
            "class": "Interlace",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/normalizer.js",
            "line": 16,
            "description": "Gets the header chunk",
            "itemtype": "method",
            "name": "getHeaderChunk",
            "return": {
                "description": "",
                "type": "Chunk"
            },
            "class": "Normalizer",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/normalizer.js",
            "line": 27,
            "description": "Encodes color values of an image",
            "itemtype": "method",
            "name": "encode",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "class": "Normalizer",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/normalizer.js",
            "line": 39,
            "description": "Determines the max number for a bit-depth",
            "itemtype": "method",
            "name": "_determineMaxValue",
            "return": {
                "description": "",
                "type": "Int"
            },
            "access": "private",
            "tagname": "",
            "class": "Normalizer",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/normalizer.js",
            "line": 82,
            "description": "Determines the writer according to header data",
            "itemtype": "method",
            "name": "_determineWriter",
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Normalizer",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/normalizer.js",
            "line": 137,
            "description": "Decodes color values",
            "itemtype": "method",
            "name": "decode",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Int[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Int[]"
            },
            "class": "Normalizer",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/normalizer.js",
            "line": 163,
            "description": "Write bytes when image is color and has already an alpha-channel",
            "itemtype": "method",
            "name": "_writeInColorAlphaBytes",
            "params": [
                {
                    "name": "bytes",
                    "description": "Bytes that should be save to stream",
                    "type": "Int[]"
                },
                {
                    "name": "output",
                    "description": "Output list",
                    "type": "Int[]"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Normalizer",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/normalizer.js",
            "line": 178,
            "description": "Write bytes when image is color and has no alpha-channel",
            "itemtype": "method",
            "name": "_writeInColorNoAlphaBytes",
            "params": [
                {
                    "name": "bytes",
                    "description": "Bytes that should be save to stream",
                    "type": "Int[]"
                },
                {
                    "name": "output",
                    "description": "Output list",
                    "type": "Int[]"
                },
                {
                    "name": "maxValue",
                    "description": "Max value for bit-depth",
                    "type": "Int"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Normalizer",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/normalizer.js",
            "line": 194,
            "description": "Write bytes when image is grayNormalizer and has already an alpha-channel",
            "itemtype": "method",
            "name": "_writeInNoColorAlphaBytes",
            "params": [
                {
                    "name": "bytes",
                    "description": "Bytes that should be save to stream",
                    "type": "Int[]"
                },
                {
                    "name": "output",
                    "description": "Output list",
                    "type": "Int[]"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Normalizer",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/normalizer.js",
            "line": 209,
            "description": "Write bytes when image is grayNormalizer and has no alpha-channel",
            "itemtype": "method",
            "name": "_writeInNoColorNoAlphaBytes",
            "params": [
                {
                    "name": "bytes",
                    "description": "Bytes that should be save to stream",
                    "type": "Int[]"
                },
                {
                    "name": "output",
                    "description": "Output list",
                    "type": "Int[]"
                },
                {
                    "name": "maxValue",
                    "description": "Max value for bit-depth",
                    "type": "Int"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Normalizer",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/normalizer.js",
            "line": 225,
            "description": "Write bytes when image is indexed on a palette",
            "itemtype": "method",
            "name": "_writeInIndexedBytes",
            "params": [
                {
                    "name": "bytes",
                    "description": "Bytes that should be save to stream",
                    "type": "Int[]"
                },
                {
                    "name": "output",
                    "description": "Output list",
                    "type": "Int[]"
                },
                {
                    "name": "maxValue",
                    "description": "Max value for bit-depth",
                    "type": "Int"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Normalizer",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/parser.js",
            "line": 18,
            "description": "Gets the header chunk",
            "itemtype": "method",
            "name": "getHeaderChunk",
            "return": {
                "description": "",
                "type": "Chunk"
            },
            "class": "Scanline Parser",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/parser.js",
            "line": 29,
            "description": "Encodes an image",
            "itemtype": "method",
            "name": "encoder",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "",
                "type": "Int[]"
            },
            "class": "Scanline Parser",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/parser.js",
            "line": 42,
            "description": "Determines the scanline-parser factory according to header data",
            "itemtype": "method",
            "name": "_determineParserFactory",
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Scanline Parser",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/parser.js",
            "line": 83,
            "description": "Decodes an image",
            "itemtype": "method",
            "name": "decoder",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "Values read",
                "type": "Int[]"
            },
            "class": "Scanline Parser",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/parser.js",
            "line": 121,
            "description": "Parses a 1-bit scanline stream",
            "itemtype": "method",
            "name": "_parse1bit",
            "params": [
                {
                    "name": "paddingAt",
                    "description": "Defines the position of padding within each scanline",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "class": "Scanline Parser",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/parser.js",
            "line": 157,
            "description": "Parses a 2-bit scanline stream",
            "itemtype": "method",
            "name": "_parse2bit",
            "params": [
                {
                    "name": "paddingAt",
                    "description": "Defines the position of padding within each scanline",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "class": "Scanline Parser",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/parser.js",
            "line": 190,
            "description": "Parses a 4-bit scanline stream",
            "itemtype": "method",
            "name": "_parse4bit",
            "params": [
                {
                    "name": "paddingAt",
                    "description": "Defines the position of padding within each scanline",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "class": "Scanline Parser",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/parser.js",
            "line": 221,
            "description": "Parses a 8-bit scanline stream",
            "itemtype": "method",
            "name": "_parse8bit",
            "return": {
                "description": "",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "class": "Scanline Parser",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/parser.js",
            "line": 234,
            "description": "Parses a 16-bit scanline stream",
            "itemtype": "method",
            "name": "_parse16bit",
            "return": {
                "description": "",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "class": "Scanline Parser",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/parser.js",
            "line": 248,
            "description": "Decodes one pass",
            "itemtype": "method",
            "name": "_passDecode",
            "params": [
                {
                    "name": "input",
                    "description": "Input stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "output",
                    "description": "Output stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Number of values to read",
                    "type": "Int"
                },
                {
                    "name": "pixelParser",
                    "description": "Function that will be called to parse pixel from the stream",
                    "type": "Function"
                },
                {
                    "name": "values",
                    "description": "Values read",
                    "type": "Int[]"
                }
            ],
            "class": "Scanline Parser",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/scaler.js",
            "line": 18,
            "description": "Scaler factor for 1-to-8-bit value conversion",
            "static": 1,
            "itemtype": "property",
            "name": "SCALE_FACTOR_1_TO_8_BIT",
            "type": "{number}",
            "class": "Scaler",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/scaler.js",
            "line": 27,
            "description": "Scaler factor for 8-to-1-bit value conversion",
            "static": 1,
            "itemtype": "property",
            "name": "SCALE_FACTOR_8_TO_1_BIT",
            "type": "{number}",
            "class": "Scaler",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/scaler.js",
            "line": 36,
            "description": "Scaler factor for 2-to-8-bit value conversion",
            "static": 1,
            "itemtype": "property",
            "name": "SCALE_FACTOR_2_TO_8_BIT",
            "type": "{number}",
            "class": "Scaler",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/scaler.js",
            "line": 45,
            "description": "Scaler factor for 8-to-2-bit value conversion",
            "static": 1,
            "itemtype": "property",
            "name": "SCALE_FACTOR_8_TO_2_BIT",
            "type": "{number}",
            "class": "Scaler",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/scaler.js",
            "line": 54,
            "description": "Scaler factor for 4-to-8-bit value conversion",
            "static": 1,
            "itemtype": "property",
            "name": "SCALE_FACTOR_4_TO_8_BIT",
            "type": "{number}",
            "class": "Scaler",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/scaler.js",
            "line": 63,
            "description": "Scaler factor for 8-to-4-bit value conversion",
            "static": 1,
            "itemtype": "property",
            "name": "SCALE_FACTOR_8_TO_4_BIT",
            "type": "{number}",
            "class": "Scaler",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/scaler.js",
            "line": 72,
            "description": "Scaler factor for 8-to-8-bit value conversion - identity",
            "static": 1,
            "itemtype": "property",
            "name": "SCALE_FACTOR_8_TO_8_BIT",
            "type": "{number}",
            "class": "Scaler",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/scaler.js",
            "line": 81,
            "description": "Scaler factor for 16-to-8-bit value conversion",
            "static": 1,
            "itemtype": "property",
            "name": "SCALE_FACTOR_16_TO_8_BIT",
            "type": "{number}",
            "class": "Scaler",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/scaler.js",
            "line": 90,
            "description": "Scaler factor for 8-to-16-bit value conversion",
            "static": 1,
            "itemtype": "property",
            "name": "SCALE_FACTOR_8_TO_16_BIT",
            "type": "{number}",
            "class": "Scaler",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/scaler.js",
            "line": 100,
            "description": "Gets the header chunk",
            "itemtype": "method",
            "name": "getHeaderChunk",
            "return": {
                "description": "",
                "type": "Chunk"
            },
            "class": "Scaler",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/scaler.js",
            "line": 111,
            "description": "Encodes color values of an image",
            "itemtype": "method",
            "name": "encode",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "Scaler",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/scaler.js",
            "line": 123,
            "description": "Determines the scaler according to header data",
            "itemtype": "method",
            "name": "_determineScaler",
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Scaler",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/scaler.js",
            "line": 190,
            "description": "Decodes color values",
            "itemtype": "method",
            "name": "decode",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Int[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "Scaler",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/scaler.js",
            "line": 226,
            "description": "Scales a value according to the header",
            "itemtype": "method",
            "name": "decodeValue",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Scaler",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/processor/scaler.js",
            "line": 266,
            "description": "Scales a value according to the header",
            "itemtype": "method",
            "name": "encodeValue",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Scaler",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/bufferedStream.js",
            "line": 52,
            "description": "Returns the number of bytes left before resizing",
            "itemtype": "method",
            "name": "getSpaceLeft",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "BufferedStream",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/bufferedStream.js",
            "line": 63,
            "description": "Checks if a read goes beyond the write pointer, reaching out of bounds",
            "itemtype": "method",
            "name": "_readCheck",
            "params": [
                {
                    "name": "size",
                    "description": "Size of the data that is pending to be read from the stream",
                    "type": "Int"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "BufferedStream",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/bufferedStream.js",
            "line": 76,
            "description": "Skips a number of bytes",
            "params": [
                {
                    "name": "count",
                    "description": "Number of bytes to skip",
                    "type": "Int"
                }
            ],
            "class": "BufferedStream",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/bufferedStream.js",
            "line": 86,
            "itemtype": "method",
            "name": "readUInt8",
            "params": [
                {
                    "name": "noAssert",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "BufferedStream",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/bufferedStream.js",
            "line": 91,
            "itemtype": "method",
            "name": "peekUInt8",
            "params": [
                {
                    "name": "noAssert",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "BufferedStream",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/bufferedStream.js",
            "line": 199,
            "description": "Reads a string from the stream without moving the read pointer",
            "itemtype": "method",
            "name": "peekString",
            "params": [
                {
                    "name": "size",
                    "description": "Number of bytes to read from stream",
                    "type": "Int"
                },
                {
                    "name": "encoding",
                    "description": "Encoding of string",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'utf8'"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "BufferedStream",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/bufferedStream.js",
            "line": 212,
            "description": "Reads a string from the stream",
            "itemtype": "method",
            "name": "readString",
            "params": [
                {
                    "name": "size",
                    "description": "Number of bytes to read from stream",
                    "type": "Int"
                },
                {
                    "name": "encoding",
                    "description": "Encoding of string",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'utf8'"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "BufferedStream",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/bufferedStream.js",
            "line": 228,
            "description": "Reads data from the stream into a buffer without moving the read pointer",
            "itemtype": "method",
            "name": "peekBuffer",
            "params": [
                {
                    "name": "size",
                    "description": "Number of bytes that should be read from the stream",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "BufferedStream",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/bufferedStream.js",
            "line": 246,
            "description": "Reads data from the stream into a buffer",
            "itemtype": "method",
            "name": "readBuffer",
            "params": [
                {
                    "name": "size",
                    "description": "Number of bytes that should be read from the stream",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "BufferedStream",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/bufferedStream.js",
            "line": 261,
            "description": "Reads data from the stream into a buffer",
            "itemtype": "method",
            "name": "peekBufferedStream",
            "params": [
                {
                    "name": "stream",
                    "description": "Stream to write to",
                    "type": "BufferedStream"
                },
                {
                    "name": "size",
                    "description": "Number of bytes that should be read",
                    "type": "Int"
                }
            ],
            "class": "BufferedStream",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/bufferedStream.js",
            "line": 272,
            "description": "Reads data from the stream into a buffer",
            "itemtype": "method",
            "name": "readBufferedStream",
            "params": [
                {
                    "name": "stream",
                    "description": "Stream to write to",
                    "type": "BufferedStream"
                },
                {
                    "name": "size",
                    "description": "Number of bytes that should be read",
                    "type": "Int"
                }
            ],
            "class": "BufferedStream",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/bufferedStream.js",
            "line": 286,
            "description": "Checks if a write needs a re-size",
            "itemtype": "method",
            "name": "_writeCheck",
            "params": [
                {
                    "name": "size",
                    "description": "Size that is pending to be written to the stream",
                    "type": "Int"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "BufferedStream",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/bufferedStream.js",
            "line": 299,
            "description": "Re-sizes the internal buffer, copying all existing data into it",
            "itemtype": "method",
            "name": "_resize",
            "access": "private",
            "tagname": "",
            "class": "BufferedStream",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/bufferedStream.js",
            "line": 311,
            "itemtype": "method",
            "name": "writeUInt8",
            "params": [
                {
                    "name": "noAssert",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "BufferedStream",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/bufferedStream.js",
            "line": 336,
            "description": "Writes a string to the stream",
            "itemtype": "method",
            "name": "writeASCIIString",
            "params": [
                {
                    "name": "text",
                    "description": "Text to write to the stream",
                    "type": "String"
                }
            ],
            "class": "BufferedStream",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/bufferedStream.js",
            "line": 353,
            "description": "Writes a string to the stream",
            "itemtype": "method",
            "name": "writeString",
            "params": [
                {
                    "name": "text",
                    "description": "Text to write to the stream",
                    "type": "String"
                },
                {
                    "name": "encoding",
                    "description": "Encoding of string",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'utf8'"
                }
            ],
            "class": "BufferedStream",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/bufferedStream.js",
            "line": 364,
            "description": "Writes a buffer to the stream",
            "itemtype": "method",
            "name": "writeBuffer",
            "params": [
                {
                    "name": "buffer",
                    "description": "Data buffer",
                    "type": "Buffer"
                },
                {
                    "name": "offset",
                    "description": "Offset within buffer",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "length",
                    "description": "length Length of buffer",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "buffer.length-offset"
                }
            ],
            "class": "BufferedStream",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/bufferedStream.js",
            "line": 383,
            "description": "Writes a buffered stream into the stream",
            "params": [
                {
                    "name": "stream",
                    "description": "",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of buffered data",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "stream.length"
                }
            ],
            "class": "BufferedStream",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/bufferedStream.js",
            "line": 400,
            "description": "Clones the stream with the current internal state",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Cloned stream",
                "type": "BufferedStream"
            },
            "class": "BufferedStream",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/bufferedStream.js",
            "line": 410,
            "description": "Slices the stream",
            "itemtype": "method",
            "name": "slice",
            "params": [
                {
                    "name": "start",
                    "description": "Start of stream",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "end",
                    "description": "End of stream",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "this.length"
                }
            ],
            "return": {
                "description": "Sliced stream",
                "type": "BufferedStream"
            },
            "class": "BufferedStream",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/bufferedStream.js",
            "line": 439,
            "description": "Converts contents to a buffer without moving the read pointer",
            "itemtype": "method",
            "name": "toBuffer",
            "params": [
                {
                    "name": "noCopy",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "BufferedStream",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/chunkUtils.js",
            "line": 11,
            "description": "Gets all chunks available",
            "itemtype": "method",
            "name": "getChunks",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "chunkUtils",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/chunkUtils.js",
            "line": 21,
            "description": "Clears a specific type of chunks, removing all of the from the chunk-dictionary",
            "itemtype": "method",
            "name": "clearChunksByType",
            "params": [
                {
                    "name": "type",
                    "description": "Chunk-type that should be cleared",
                    "type": "String"
                }
            ],
            "class": "chunkUtils",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/chunkUtils.js",
            "line": 33,
            "description": "Gets a list of available chunks by type",
            "itemtype": "method",
            "name": "getChunksByType",
            "params": [
                {
                    "name": "type",
                    "description": "Name of chunks",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "Is retrieval of chunks required?",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Chunk[]|null"
            },
            "class": "chunkUtils",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/chunkUtils.js",
            "line": 53,
            "description": "Checks if a specific chunk-type exists in the chunk-dictionary",
            "itemtype": "method",
            "name": "hasChunksOfType",
            "params": [
                {
                    "name": "type",
                    "description": "Name of chunks",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "chunkUtils",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/chunkUtils.js",
            "line": 64,
            "description": "Gets the first chunk in the chunk-type list",
            "itemtype": "method",
            "name": "getFirstChunk",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "Is retrieval of chunk required?",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Chunk|null"
            },
            "class": "chunkUtils",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/chunkUtils.js",
            "line": 82,
            "description": "Gets the header chunk",
            "itemtype": "method",
            "name": "getHeaderChunk",
            "return": {
                "description": "",
                "type": "Chunk"
            },
            "class": "chunkUtils",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/chunkUtils.js",
            "line": 92,
            "description": "Gets a list of available chunk-types",
            "itemtype": "method",
            "name": "getChunkTypes",
            "return": {
                "description": "List of chunk-types",
                "type": "String[]"
            },
            "class": "chunkUtils",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/chunkUtils.js",
            "line": 112,
            "description": "Gets a list of all chunks in one list",
            "itemtype": "method",
            "name": "getAllChunks",
            "return": {
                "description": "",
                "type": "Chunk[]"
            },
            "class": "chunkUtils",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/chunkUtils.js",
            "line": 133,
            "description": "Applies all chunks sorted according to sequence",
            "itemtype": "method",
            "name": "applyWithSortedChunks",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to be called with each chunk in order",
                    "type": "Function"
                },
                {
                    "name": "sortByChunks",
                    "description": "If this flag is set, sorting will be done by chunks, not chunk-types.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "reverse",
                    "description": "Should sorting be reversed?",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "chunkUtils",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/chunkUtils.js",
            "line": 173,
            "description": "Creates a new chunk of given type",
            "itemtype": "method",
            "name": "createChunk",
            "params": [
                {
                    "name": "type",
                    "description": "Type of chunk",
                    "type": "String"
                },
                {
                    "name": "chunks",
                    "description": "Dictionary of chunks",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Chunk"
            },
            "class": "chunkUtils",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/chunkUtils.js",
            "line": 188,
            "description": "Adds a new chunk to the chunk-dictionary",
            "itemtype": "method",
            "name": "addChunk",
            "params": [
                {
                    "name": "chunk",
                    "description": "Chunk",
                    "type": "Chunk"
                }
            ],
            "class": "chunkUtils",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/constants.js",
            "line": 10,
            "description": "Complete PNG signature",
            "type": "{int[]}",
            "class": "constants",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/constants.js",
            "line": 18,
            "description": "List of available color types",
            "static": 1,
            "type": "{object}",
            "class": "constants",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/constants.js",
            "line": 32,
            "description": "List of unit types",
            "type": "{object}",
            "class": "constants",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/constants.js",
            "line": 42,
            "description": "List of rendering intents",
            "type": "{object}",
            "class": "constants",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/constants.js",
            "line": 54,
            "description": "List of interlace methods",
            "type": "{object}",
            "class": "constants",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/utils.js",
            "line": 13,
            "description": "Loads a specific module, if it exists, otherwise it will just ignore it",
            "itemtype": "method",
            "name": "loadModule",
            "params": [
                {
                    "name": "path",
                    "description": "Path to the module",
                    "type": "String"
                },
                {
                    "name": "obj",
                    "description": "Object the module should apply to",
                    "type": "Object"
                }
            ],
            "class": "utils",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/utils/utils.js",
            "line": 26,
            "description": "Copies the methods of a module to an object",
            "itemtype": "method",
            "name": "copyModule",
            "params": [
                {
                    "name": "methods",
                    "description": "Dictionary of module methods",
                    "type": "Object"
                },
                {
                    "name": "obj",
                    "description": "Object the module methods should apply to",
                    "type": "Object"
                }
            ],
            "class": "utils",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 24,
            "description": "Gets the chunk-type as string\n\nNote:\nIdentifier for chunk that is the string of the chunk-type.",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "",
                "type": "String|null"
            },
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 37,
            "description": "Gets the sequence\n\nNote:\nThis defines the sequence the chunk will have when all chunks are written to the blob.\nLowest sequence numbers will be written first.\n\nRange:\n* 0 - Header\n* 500 - Data\n* 1000 - End",
            "itemtype": "method",
            "name": "getSequence",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 57,
            "description": "Is value an upper-case ASCII character?",
            "itemtype": "method",
            "name": "_isUpperCase",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 70,
            "description": "Is the chunk a critical chunk that cannot be ignored?",
            "itemtype": "method",
            "name": "isCritical",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 80,
            "description": "Is the chunk an ancillary chunk that can be ignored when unknown?",
            "itemtype": "method",
            "name": "isAncillary",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 91,
            "description": "Is the chunk a public chunk?",
            "itemtype": "method",
            "name": "isPublic",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 101,
            "description": "Is the chunk a private chunk?",
            "itemtype": "method",
            "name": "isPrivate",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 112,
            "description": "Is the data safe to copy?",
            "itemtype": "method",
            "name": "isSafe",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 122,
            "description": "Is the data safe to copy?",
            "itemtype": "method",
            "name": "isUnsafe",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 133,
            "description": "Parsing of chunk data\n\nPhase 1\n\nNote:\nUse this methods to parse data for each chunk.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "length",
                    "description": "Length of chunk data",
                    "type": "Int"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 151,
            "description": "Decoding of chunk data before scaling\n\nPhase 2\n\nNote:\nUse this method when you have to do some preliminary\nmodifications to the image like decompression,\napplying of changes before the image is scaled.",
            "itemtype": "method",
            "name": "decode",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Int[]"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Int[]"
            },
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 172,
            "description": "Re-working of image after scaling\n\nPhase 3\n\nNote:\nUse this method to add modifications to the scaled image.",
            "itemtype": "method",
            "name": "postDecode",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Buffer"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 191,
            "description": "Finalizing image - applying changes to completed image\n\nPhase 4",
            "itemtype": "method",
            "name": "finalizeDecode",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Buffer"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 207,
            "description": "Decodes chunk-data to an external data-object\n\nPhase 5\n\nNote:\nUse this method to export data to the data-object.",
            "static": 1,
            "itemtype": "method",
            "name": "decodeData",
            "params": [
                {
                    "name": "data",
                    "description": "Data-object that will be used to export values",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 226,
            "description": "Encodes chunk-data from an external data-object\n\nPhase 1\n\nNote:\nUse this method to import data from the data-object.",
            "static": 1,
            "itemtype": "method",
            "name": "encodeData",
            "params": [
                {
                    "name": "data",
                    "description": "Object that will be used to import data to the chunk",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 244,
            "description": "Before encoding of chunk data\n\nPhase 2\n\nNote:\nUse this method to gather image-data before scaling.",
            "itemtype": "method",
            "name": "preEncode",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 261,
            "description": "Encoding of chunk data\n\nPhase 3\n\nNote:\nUse this method to add data to the image after scaling.",
            "itemtype": "method",
            "name": "encode",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 278,
            "description": "Composing of image data\n\nPhase 4\n\nNote:\nUse this method to compose each chunks data.",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                }
            ],
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 294,
            "description": "Registry",
            "static": 1,
            "type": "{object}",
            "access": "private",
            "tagname": "",
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 303,
            "description": "Modifies the data-object with the contents of the decoded chunks",
            "static": 1,
            "itemtype": "method",
            "name": "decodeTypeData",
            "params": [
                {
                    "name": "type",
                    "description": "Chunk-type",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Object that will holds all the data from the decoded chunks",
                    "type": "Object"
                },
                {
                    "name": "chunks",
                    "description": "Dictionary of already decoded chunks",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "Should parsing be strict?",
                    "type": "Boolean"
                }
            ],
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 326,
            "description": "Determines a list of chunks to encode of the same type from the data-object",
            "static": 1,
            "itemtype": "method",
            "name": "encodeTypeData",
            "params": [
                {
                    "name": "type",
                    "description": "Chunk-type",
                    "type": "String"
                },
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "data",
                    "description": "Object that holds all the data that should be encoded",
                    "type": "Object"
                },
                {
                    "name": "chunks",
                    "description": "Dictionary of already determined chunks",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of chunks to encode",
                "type": "Chunk[]"
            },
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 352,
            "description": "Adds a new chunk-type to the registry",
            "static": 1,
            "itemtype": "method",
            "name": "addChunkType",
            "params": [
                {
                    "name": "type",
                    "description": "Name of the chunk",
                    "type": "String"
                },
                {
                    "name": "module",
                    "description": "List of methods specific for the chunk-type",
                    "type": "Object"
                }
            ],
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 373,
            "description": "Gets a specific chunk-type module, listing all chunk-type specific methods",
            "static": 1,
            "itemtype": "method",
            "name": "getChunkType",
            "params": [
                {
                    "name": "type",
                    "description": "Name of the chunk",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Chunk module",
                "type": "Object"
            },
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 385,
            "description": "Gets a list of registered chunk types",
            "static": 1,
            "itemtype": "method",
            "name": "getChunkTypes",
            "return": {
                "description": "",
                "type": "String[]"
            },
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 406,
            "description": "Applies the chunk-module on an object",
            "static": 1,
            "itemtype": "method",
            "name": "applyChunkType",
            "params": [
                {
                    "name": "type",
                    "description": "Name of the chunk",
                    "type": "String"
                },
                {
                    "name": "obj",
                    "description": "Object the module to apply to",
                    "type": "Object"
                }
            ],
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 443,
            "description": "Initializes all official chunk types",
            "static": 1,
            "itemtype": "method",
            "name": "initDefaultChunkTypes",
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/chunk.js",
            "line": 462,
            "description": "Initializes all known custom chunk types",
            "static": 1,
            "itemtype": "method",
            "name": "initCustomChunkTypes",
            "class": "Chunk",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/decoder.js",
            "line": 30,
            "description": "Gets the data supplied by each chunk",
            "itemtype": "method",
            "name": "getChunkData",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Decoder",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/decoder.js",
            "line": 40,
            "description": "Decodes the supplied data",
            "itemtype": "method",
            "name": "decode",
            "params": [
                {
                    "name": "data",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "strict",
                            "description": "Strict decoding",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "Decoder",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/decoder.js",
            "line": 137,
            "description": "Reads the next chunk in the stream",
            "itemtype": "method",
            "name": "_parseChunk",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "strict",
                    "description": "Should decoding be strict?",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Decoding options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Chunk read",
                "type": "Chunk"
            },
            "access": "private",
            "tagname": "",
            "class": "Decoder",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/encoder.js",
            "line": 30,
            "description": "Gets the data supplied by each chunk",
            "itemtype": "method",
            "name": "getChunkData",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Encoder",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/encoder.js",
            "line": 41,
            "description": "Encodes the supplied data",
            "itemtype": "method",
            "name": "encode",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "width",
                    "description": "Width of image",
                    "type": "Int"
                },
                {
                    "name": "height",
                    "description": "Height of image",
                    "type": "Int"
                },
                {
                    "name": "options",
                    "description": "Optimization options",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Encoder",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/encoder.js",
            "line": 106,
            "description": "Encodes one chunk to the data stream",
            "itemtype": "method",
            "name": "_encodeChunk",
            "params": [
                {
                    "name": "stream",
                    "description": "Data stream",
                    "type": "BufferedStream"
                },
                {
                    "name": "chunk",
                    "description": "Chunk that should be serialized to the stream",
                    "type": "Chunk"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Encoder",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/png/encoder.js",
            "line": 148,
            "itemtype": "method",
            "name": "_optimize",
            "params": [
                {
                    "name": "image",
                    "description": "Image data",
                    "type": "Buffer"
                },
                {
                    "name": "width",
                    "description": "Width of image",
                    "type": "Int"
                },
                {
                    "name": "height",
                    "description": "Height of image",
                    "type": "Int"
                },
                {
                    "name": "data",
                    "description": "Object that holds all the data that should be encoded",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Encoder",
            "module": "PNG",
            "submodule": "PNGCore"
        },
        {
            "file": "lib/conversion.js",
            "line": 13,
            "description": "Gets the blurred value of a pixel with a gray-scale function",
            "itemtype": "method",
            "name": "getBlurPixelAtIndex",
            "params": [
                {
                    "name": "idx",
                    "description": "Index",
                    "type": "Int"
                },
                {
                    "name": "funcName",
                    "description": "Gray-scale function",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/conversion.js",
            "line": 77,
            "description": "Gets the blur-value of a pixel at a specific coordinate",
            "itemtype": "method",
            "name": "getBlurPixel",
            "params": [
                {
                    "name": "x",
                    "description": "X-coordinate of pixel",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "Y-coordinate of pixel",
                    "type": "Int"
                },
                {
                    "name": "funcName",
                    "description": "Gray-scale function",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "blur-value",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/conversion.js",
            "line": 92,
            "description": "Gets the YIQ-value of a pixel at a specific index\nThe values for RGB correspond afterwards to YIQ respectively.",
            "itemtype": "method",
            "name": "getYIQAtIndex",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "YIQ-value",
                "type": "Object"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/conversion.js",
            "line": 120,
            "description": "Gets the YIQ-value of a pixel at a specific coordinate\nThe values for RGB correspond afterwards to YIQ respectively.",
            "itemtype": "method",
            "name": "getYIQ",
            "params": [
                {
                    "name": "x",
                    "description": "X-coordinate of pixel",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "Y-coordinate of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "YIQ-value",
                "type": "Object"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/conversion.js",
            "line": 135,
            "description": "Gets the luma of a pixel at a specific index",
            "itemtype": "method",
            "name": "getLumaAtIndex",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "YIQ-value",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/conversion.js",
            "line": 146,
            "description": "Gets the luma of a pixel at a specific coordinate",
            "itemtype": "method",
            "name": "getLuma",
            "params": [
                {
                    "name": "x",
                    "description": "X-coordinate of pixel",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "Y-coordinate of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "YIQ-value",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/conversion.js",
            "line": 159,
            "description": "Gets the sepia of a pixel at a specific index",
            "itemtype": "method",
            "name": "getSepiaAtIndex",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Color",
                "type": "Object"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/conversion.js",
            "line": 182,
            "description": "Gets the sepia of a pixel at a specific coordinate",
            "itemtype": "method",
            "name": "getSepia",
            "params": [
                {
                    "name": "x",
                    "description": "X-coordinate of pixel",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "Y-coordinate of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Color",
                "type": "Object"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/conversion.js",
            "line": 195,
            "description": "Gets the luminosity of a pixel at a specific index",
            "itemtype": "method",
            "name": "getLuminosityAtIndex",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Luminosity",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/conversion.js",
            "line": 206,
            "description": "Gets the luminosity of a pixel at a specific coordinate",
            "itemtype": "method",
            "name": "getLuminosity",
            "params": [
                {
                    "name": "x",
                    "description": "X-coordinate of pixel",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "Y-coordinate of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Luminosity",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/conversion.js",
            "line": 220,
            "description": "Gets the lightness of a pixel at a specific index",
            "itemtype": "method",
            "name": "getLightnessAtIndex",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Lightness",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/conversion.js",
            "line": 235,
            "description": "Gets the lightness of a pixel at a specific coordinate",
            "itemtype": "method",
            "name": "getLightness",
            "params": [
                {
                    "name": "x",
                    "description": "X-coordinate of pixel",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "Y-coordinate of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Lightness",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/conversion.js",
            "line": 249,
            "description": "Gets the average of a pixel at a specific index",
            "itemtype": "method",
            "name": "getGrayScaleAtIndex",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Average",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/conversion.js",
            "line": 260,
            "description": "Gets the average of a pixel at a specific coordinate",
            "itemtype": "method",
            "name": "getGrayScale",
            "params": [
                {
                    "name": "x",
                    "description": "X-coordinate of pixel",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "Y-coordinate of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Average",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/filters.js",
            "line": 12,
            "description": "Generates a filter function by doing common tasks to abstract this away from the actual filter functions",
            "itemtype": "method",
            "name": "generateFilter",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "class": "PNGImage",
            "module": "PNG"
        },
        {
            "file": "lib/filters.js",
            "line": 22,
            "description": "Creates a destination image",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "PNGImage"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "needsCopy",
                            "description": "",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "PNGImage"
            },
            "class": "PNGImage",
            "module": "PNG"
        },
        {
            "file": "lib/modify.js",
            "line": 13,
            "description": "Rotates the current image 90 degree counter-clockwise",
            "itemtype": "method",
            "name": "rotateCCW",
            "return": {
                "description": "Rotated image",
                "type": "PNGImage"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/modify.js",
            "line": 35,
            "description": "Rotates the current image 90 degree clockwise",
            "itemtype": "method",
            "name": "rotateCW",
            "return": {
                "description": "Rotated image",
                "type": "PNGImage"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/pixel.js",
            "line": 13,
            "description": "Gets the color of a pixel at a specific index",
            "itemtype": "method",
            "name": "getPixel",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Color",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/pixel.js",
            "line": 24,
            "description": "Gets the color of a pixel at a specific coordinate",
            "itemtype": "method",
            "name": "getAt",
            "params": [
                {
                    "name": "x",
                    "description": "X-coordinate of pixel",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "Y-coordinate of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Color",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/pixel.js",
            "line": 37,
            "description": "Gets the color of a pixel at a specific coordinate\nAlias for getAt",
            "itemtype": "method",
            "name": "getPixel",
            "params": [
                {
                    "name": "x",
                    "description": "X-coordinate of pixel",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "Y-coordinate of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Color",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/pixel.js",
            "line": 51,
            "description": "Sets the color of a pixel at a specific index",
            "itemtype": "method",
            "name": "setAtIndex",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of pixel",
                    "type": "Int"
                },
                {
                    "name": "color",
                    "description": "",
                    "type": "Object|int",
                    "props": [
                        {
                            "name": "red",
                            "description": "Red value for pixel",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "green",
                            "description": "Green value for pixel",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "blue",
                            "description": "Blue value for pixel",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "alpha",
                            "description": "Alpha value for pixel",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "opacity",
                            "description": "Opacity of color",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/pixel.js",
            "line": 77,
            "description": "Sets the color of a pixel at a specific coordinate",
            "itemtype": "method",
            "name": "setAt",
            "params": [
                {
                    "name": "x",
                    "description": "X-coordinate for pixel",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "Y-coordinate for pixel",
                    "type": "Int"
                },
                {
                    "name": "color",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "red",
                            "description": "Red value for pixel",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "green",
                            "description": "Green value for pixel",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "blue",
                            "description": "Blue value for pixel",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "alpha",
                            "description": "Alpha value for pixel",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "opacity",
                            "description": "Opacity of color",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/pixel.js",
            "line": 95,
            "description": "Sets the color of a pixel at a specific coordinate\nAlias for setAt",
            "itemtype": "method",
            "name": "setPixel",
            "params": [
                {
                    "name": "x",
                    "description": "X-coordinate for pixel",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "Y-coordinate for pixel",
                    "type": "Int"
                },
                {
                    "name": "color",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "red",
                            "description": "Red value for pixel",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "green",
                            "description": "Green value for pixel",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "blue",
                            "description": "Blue value for pixel",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "alpha",
                            "description": "Alpha value for pixel",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "opacity",
                            "description": "Opacity of color",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/pixel.js",
            "line": 114,
            "description": "Gets the color of a pixel at a specific index",
            "itemtype": "method",
            "name": "getColorAtIndex",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Color",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/pixel.js",
            "line": 125,
            "description": "Gets the color of a pixel at a specific coordinate",
            "itemtype": "method",
            "name": "getColor",
            "params": [
                {
                    "name": "x",
                    "description": "X-coordinate of pixel",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "Y-coordinate of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Color",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/pixel.js",
            "line": 139,
            "description": "Calculates the final color value for opacity",
            "itemtype": "method",
            "name": "_calculateColorValue",
            "params": [
                {
                    "name": "originalValue",
                    "description": "",
                    "type": "Int"
                },
                {
                    "name": "paintValue",
                    "description": "",
                    "type": "Int"
                },
                {
                    "name": "opacity",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Int"
            },
            "access": "private",
            "tagname": "",
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/pixel.js",
            "line": 163,
            "description": "Get the red value of a pixel",
            "itemtype": "method",
            "name": "getRed",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/pixel.js",
            "line": 174,
            "description": "Set the red value of a pixel",
            "itemtype": "method",
            "name": "setRed",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of pixel",
                    "type": "Int"
                },
                {
                    "name": "value",
                    "description": "Value for pixel",
                    "type": "Int"
                },
                {
                    "name": "opacity",
                    "description": "Opacity of value set",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/pixel.js",
            "line": 187,
            "description": "Get the green value of a pixel",
            "itemtype": "method",
            "name": "getGreen",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/pixel.js",
            "line": 198,
            "description": "Set the green value of a pixel",
            "itemtype": "method",
            "name": "setGreen",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of pixel",
                    "type": "Int"
                },
                {
                    "name": "value",
                    "description": "Value for pixel",
                    "type": "Int"
                },
                {
                    "name": "opacity",
                    "description": "Opacity of value set",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/pixel.js",
            "line": 211,
            "description": "Get the blue value of a pixel",
            "itemtype": "method",
            "name": "getBlue",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/pixel.js",
            "line": 222,
            "description": "Set the blue value of a pixel",
            "itemtype": "method",
            "name": "setBlue",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of pixel",
                    "type": "Int"
                },
                {
                    "name": "value",
                    "description": "Value for pixel",
                    "type": "Int"
                },
                {
                    "name": "opacity",
                    "description": "Opacity of value set",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/pixel.js",
            "line": 235,
            "description": "Get the alpha value of a pixel",
            "itemtype": "method",
            "name": "getAlpha",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/pixel.js",
            "line": 246,
            "description": "Set the alpha value of a pixel",
            "itemtype": "method",
            "name": "setAlpha",
            "params": [
                {
                    "name": "idx",
                    "description": "Index of pixel",
                    "type": "Int"
                },
                {
                    "name": "value",
                    "description": "Value for pixel",
                    "type": "Int"
                },
                {
                    "name": "opacity",
                    "description": "Opacity of value set",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/pixel.js",
            "line": 259,
            "description": "Sets the value of a pixel",
            "itemtype": "method",
            "name": "_getValue",
            "params": [
                {
                    "name": "offset",
                    "description": "Offset of a value",
                    "type": "Int"
                },
                {
                    "name": "colorOffset",
                    "description": "Offset of a color",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Int"
            },
            "access": "private",
            "tagname": "",
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "lib/pixel.js",
            "line": 273,
            "description": "Sets the value of a pixel",
            "itemtype": "method",
            "name": "_setValue",
            "params": [
                {
                    "name": "offset",
                    "description": "Offset of a value",
                    "type": "Int"
                },
                {
                    "name": "colorOffset",
                    "description": "Offset of a color",
                    "type": "Int"
                },
                {
                    "name": "value",
                    "description": "Value for pixel",
                    "type": "Int"
                },
                {
                    "name": "opacity",
                    "description": "Opacity of value set",
                    "type": "Number",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "index.js",
            "line": 33,
            "description": "Project version",
            "itemtype": "property",
            "name": "version",
            "static": 1,
            "type": "{string}",
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "index.js",
            "line": 43,
            "description": "Filter dictionary",
            "itemtype": "property",
            "name": "filters",
            "static": 1,
            "type": "{object}",
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "index.js",
            "line": 52,
            "description": "Sets a filter to the filter list",
            "itemtype": "method",
            "name": "setFilter",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "index.js",
            "line": 68,
            "description": "Creates an image by dimensions",
            "static": 1,
            "itemtype": "method",
            "name": "createImage",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Int"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "PNGImage"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "index.js",
            "line": 86,
            "description": "Copies an already existing image",
            "static": 1,
            "itemtype": "method",
            "name": "copyImage",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "PNGImage"
                }
            ],
            "return": {
                "description": "",
                "type": "PNGImage"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "index.js",
            "line": 101,
            "description": "Reads an image from the filesystem",
            "static": 1,
            "itemtype": "method",
            "name": "readImage",
            "params": [
                {
                    "name": "path",
                    "description": "Url or file-path",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "PNGImage"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "index.js",
            "line": 166,
            "description": "Reads an image from the filesystem synchronously",
            "static": 1,
            "itemtype": "method",
            "name": "readImageSync",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "PNGImage"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "index.js",
            "line": 179,
            "description": "Loads an image from a blob",
            "static": 1,
            "itemtype": "method",
            "name": "loadImage",
            "params": [
                {
                    "name": "blob",
                    "description": "",
                    "type": "Buffer"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "PNGImage"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "index.js",
            "line": 206,
            "description": "Loads an image synchronously from a blob",
            "static": 1,
            "itemtype": "method",
            "name": "loadImageSync",
            "params": [
                {
                    "name": "blob",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "",
                "type": "PNGImage"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "index.js",
            "line": 235,
            "description": "Log method that can be overwritten to modify the logging behavior",
            "static": 1,
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "index.js",
            "line": 248,
            "description": "Gets the original png-js object",
            "itemtype": "method",
            "name": "getImage",
            "return": {
                "description": "",
                "type": "PNG"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "index.js",
            "line": 258,
            "description": "Gets the image as a blob",
            "itemtype": "method",
            "name": "getBlob",
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "index.js",
            "line": 269,
            "description": "Gets the width of the image",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "index.js",
            "line": 279,
            "description": "Gets the height of the image",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "index.js",
            "line": 290,
            "description": "Clips the current image by modifying it in-place",
            "itemtype": "method",
            "name": "clip",
            "params": [
                {
                    "name": "x",
                    "description": "Starting x-coordinate",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "Starting y-coordinate",
                    "type": "Int"
                },
                {
                    "name": "width",
                    "description": "Width of area relative to starting coordinate",
                    "type": "Int"
                },
                {
                    "name": "height",
                    "description": "Height of area relative to starting coordinate",
                    "type": "Int"
                }
            ],
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "index.js",
            "line": 318,
            "description": "Fills an area with the specified color",
            "itemtype": "method",
            "name": "fillRect",
            "params": [
                {
                    "name": "x",
                    "description": "Starting x-coordinate",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "Starting y-coordinate",
                    "type": "Int"
                },
                {
                    "name": "width",
                    "description": "Width of area relative to starting coordinate",
                    "type": "Int"
                },
                {
                    "name": "height",
                    "description": "Height of area relative to starting coordinate",
                    "type": "Int"
                },
                {
                    "name": "color",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "red",
                            "description": "Red channel of color to set",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "green",
                            "description": "Green channel of color to set",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "blue",
                            "description": "Blue channel of color to set",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "alpha",
                            "description": "Alpha channel for color to set",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "opacity",
                            "description": "Opacity of color",
                            "type": "Float",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "index.js",
            "line": 350,
            "description": "Applies a list of filters to the image",
            "itemtype": "method",
            "name": "applyFilters",
            "params": [
                {
                    "name": "filters",
                    "description": "Names of filters in sequence `{key:<string>, options:<object>}`",
                    "type": "String|object|object[]"
                },
                {
                    "name": "returnResult",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "PNGImage"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "index.js",
            "line": 409,
            "description": "Gets index of a specific coordinate",
            "itemtype": "method",
            "name": "getIndex",
            "params": [
                {
                    "name": "x",
                    "description": "X-coordinate of pixel",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "Y-coordinate of pixel",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Index of pixel",
                "type": "Int"
            },
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "index.js",
            "line": 422,
            "description": "Writes the image to the filesystem",
            "itemtype": "method",
            "name": "writeImage",
            "params": [
                {
                    "name": "filename",
                    "description": "Path to file",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Callback",
                    "type": "Function"
                }
            ],
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "index.js",
            "line": 451,
            "description": "Writes the image to a buffer",
            "itemtype": "method",
            "name": "toBlob",
            "params": [
                {
                    "name": "fn",
                    "description": "Callback",
                    "type": "Function"
                }
            ],
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        },
        {
            "file": "index.js",
            "line": 488,
            "description": "Instruments the node environment so that PNG files can be loaded through require calls",
            "static": 1,
            "itemtype": "method",
            "name": "instrument",
            "class": "PNGImage",
            "module": "PNG",
            "submodule": "Core"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: createcrctable",
            "line": " lib/png/processor/crc.js:7"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/png/utils/bufferedStream.js:228"
        },
        {
            "message": "Missing item type\nCreates a CRC table to speed-up the algorithm",
            "line": " lib/png/processor/crc.js:7"
        },
        {
            "message": "Missing item type\nPre-calculated CRC table",
            "line": " lib/png/processor/crc.js:39"
        },
        {
            "message": "Missing item type\nSkips a number of bytes",
            "line": " lib/png/utils/bufferedStream.js:76"
        },
        {
            "message": "Missing item type\nWrites a buffered stream into the stream",
            "line": " lib/png/utils/bufferedStream.js:383"
        },
        {
            "message": "Missing item type\nComplete PNG signature",
            "line": " lib/png/utils/constants.js:10"
        },
        {
            "message": "Missing item type\nList of available color types",
            "line": " lib/png/utils/constants.js:18"
        },
        {
            "message": "Missing item type\nList of unit types",
            "line": " lib/png/utils/constants.js:32"
        },
        {
            "message": "Missing item type\nList of rendering intents",
            "line": " lib/png/utils/constants.js:42"
        },
        {
            "message": "Missing item type\nList of interlace methods",
            "line": " lib/png/utils/constants.js:54"
        },
        {
            "message": "Missing item type\nRegistry",
            "line": " lib/png/chunk.js:294"
        }
    ]
}