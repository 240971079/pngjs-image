{"name":"Pngjs-image","tagline":"Native PNG manipulation library","body":"PNGjs-Image\r\n===========\r\n\r\nNative PNG image manipulation\r\n\r\n[![Build Status](https://img.shields.io/travis/yahoo/pngjs-image.svg)](http://travis-ci.org/yahoo/pngjs-image)\r\n[![Coveralls Coverage](https://img.shields.io/coveralls/yahoo/pngjs-image.svg)](https://coveralls.io/r/yahoo/pngjs-image)\r\n[![Code Climate Grade](https://img.shields.io/codeclimate/github/yahoo/pngjs-image.svg)](https://codeclimate.com/github/yahoo/pngjs-image)\r\n\r\n[![NPM version](https://badge.fury.io/js/pngjs-image.svg)](https://www.npmjs.com/package/pngjs-image)\r\n[![NPM License](https://img.shields.io/npm/l/pngjs-image.svg)](https://www.npmjs.com/package/pngjs-image)\r\n\r\n[![NPM](https://nodei.co/npm/pngjs-image.png?downloads=true&stars=true)](https://www.npmjs.com/package/pngjs-image)\r\n[![NPM](https://nodei.co/npm-dl/pngjs-image.png?months=3&height=2)](https://www.npmjs.com/package/pngjs-image)\r\n\r\n[![Coverage Report](https://img.shields.io/badge/Coverage_Report-Available-blue.svg)](http://yahoo.github.io/pngjs-image/coverage/lcov-report/)\r\n[![API Documentation](https://img.shields.io/badge/API_Documentation-Available-blue.svg)](http://yahoo.github.io/pngjs-image/docs/)\r\n\r\n[![Gitter Support](https://img.shields.io/badge/Support-Gitter_IM-yellow.svg)](https://gitter.im/preceptorjs/support)\r\n\r\n**Table of Contents**\r\n* [Installation](#installation)\r\n* [Usage](#usage)\r\n    * [Static-Methods](#static-methods)\r\n    * [Instance-Methods](#instance-methods)\r\n        * [Pixel manipulation](#pixel-manipulation)\r\n        * [Pixel conversion](#pixel-conversion)\r\n    * [Filters](#filters)\r\n* [API-Documentation](#api-documentation)\r\n* [Tests](#tests)\r\n* [Third-party libraries](#third-party-libraries)\r\n* [License](#license)\r\n\r\n\r\n##Installation\r\n\r\nInstall this module with the following command:\r\n```shell\r\nnpm install pngjs-image\r\n```\r\n\r\nAdd the module to your ```package.json``` dependencies:\r\n```shell\r\nnpm install --save pngjs-image\r\n```\r\nAdd the module to your ```package.json``` dev-dependencies:\r\n```shell\r\nnpm install --save-dev pngjs-image\r\n```\r\n\r\nRequire the module in your source-code:\r\n```javascript\r\nvar PNGImage = require('pngjs-image');\r\n```\r\n\r\n##Usage\r\n\r\n**Example:** Creating a new image\r\n```javascript\r\nvar image = PNGImage.createImage(100, 300);\r\n\r\n// Get width and height\r\nconsole.log(image.getWidth());\r\nconsole.log(image.getHeight());\r\n\r\n// Set a pixel at (20, 30) with red, having an alpha value of 100 (half-transparent)\r\nimage.setAt(20, 30, { red:255, green:0, blue:0, alpha:100 });\r\n\r\n// Get index of coordinate in the image buffer\r\nvar index = image.getIndex(20, 30);\r\n\r\n// Print the red color value\r\nconsole.log(image.getRed(index));\r\n\r\n// Get low level image object with buffer from the 'pngjs' package\r\nvar pngjs = image.getImage();\r\n\r\nimage.writeImage('path/to/file', function () {\r\n    console.log('Written to the file');\r\n});\r\n```\r\n\r\n**Example:** Loading an image\r\n```javascript\r\nvar image = PNGImage.readImage('path/to/file', function () {\r\n\r\n    // Get width and height\r\n    console.log(image.getWidth());\r\n    console.log(image.getHeight());\r\n\r\n    // Set a pixel at (20, 30) with red, having an alpha value of 100 (half-transparent)\r\n    image.setAt(20, 30, { red:255, green:0, blue:0, alpha:100 });\r\n});\r\n```\r\n\r\n###Static-Methods\r\n* ```<PNGImage> = PNGImage.addFilter(key, fn)``` Adds the ```fn``` filter with identifier ```key``` to the filter-list\r\n* ```<PNGImage> = PNGImage.createImage(width, height)``` Creates an image with the given size\r\n* ```<PNGImage> = PNGImage.copyImage(image)``` Copies an image into a new container\r\n* ```<PNGImage> = PNGImage.readImage(path, fn)``` Loads an image from the filesystem, calling the ```fn``` function when done\r\n* ```<PNGImage> = PNGImage.loadImage(blob, fn)``` Loads an image from memory, calling the ```fn``` function when done\r\n\r\n###Instance-Methods\r\n* ```<pngjs> = image.getImage()``` Gets the ```pngjs``` instance\r\n* ```<Buffer> = image.getBlob()``` Gets the data as a buffer object\r\n* ```<int> = image.getWidth()``` Gets the width of the image\r\n* ```<int> = image.getHeight()``` Gets the height of the image\r\n* ```image.clip(x, y, width, height)``` Clips the current image; the dimensions have to be smaller than the original image\r\n* ```image.fillRect(x, y, width, height, color)``` Fills the rectangle with the supplied color\r\n* ```image.applyFilters(filters, returnResult)``` Applies a list of filters to the image\r\n* ```<int> = image.getIndex(x, y)``` Converts the x and y coordinates to the sequential index of the image buffer\r\n* ```image.writeImage(path, fn)``` Writes the image to the filesystem and calling the ```fn``` function when done\r\n* ```image.toBlob(fn)``` Exports data to a buffer and calling the ```fn``` function when done\r\n\r\n####Pixel manipulation\r\n* ```<uint32> = image.getAtIndex(idx)``` Gets complete 32-bit pixel at index ```idx```\r\n* ```<uint32> = image.getAt(x, y)``` Gets complete 32-bit pixel at the x and y coordinate\r\n* ```<uint32> = image.getPixel(x, y)``` Gets complete 32-bit pixel at the x and y coordinate\r\n* ```image.setAtIndex(idx, color)``` Sets a specific color at the index. A color left-off will not be modified.\r\n* ```image.setAt(x, y, color)``` Sets a specific color at the x and y coordinate. A color left-off will not be modified.\r\n* ```image.setPixel(x, y, color)``` Sets a specific color at the x and y coordinate. A color left-off will not be modified.\r\n* ```<uint32> = image.getColorAtIndex(idx)``` Gets the color components of the pixel at index ```idx```\r\n* ```<uint32> = image.getColor(x, y)``` Gets the color components of the pixel at the x and y coordinate\r\n* ```<uint8> = image.getRed(idx)``` Gets the red intensity at an index\r\n* ```image.setRed(idx, value, opacity)``` Sets the red intensity at an index\r\n* ```<uint8> = image.getGreen(idx)``` Gets the green intensity at an index\r\n* ```image.setGreen(idx, value, opacity)``` Sets the green intensity at an index\r\n* ```<uint8> = image.getBlue(idx)``` Gets the blue intensity at an index\r\n* ```image.setBlue(idx, value, opacity)``` Sets the blue intensity at an index\r\n* ```<uint8> = image.getAlpha(idx)``` Gets the alpha intensity at an index\r\n* ```image.setAlpha(idx, value, opacity)``` Sets the alpha intensity at an index\r\n\r\n####Pixel conversion\r\n* ```<uint32> = image.getBlurPixelAt(idx, funcName)``` Gets the blurred color of a pixel at index ```idx```\r\n* ```<uint32> = image.getYIQAtIndex(idx)``` Gets the YIQ-value of a pixel at index ```idx```\r\n* ```<uint32> = image.getYIQ(x, y)``` Gets the YIQ-value of a pixel at the x and y coordinate\r\n* ```<uint32> = image.getLumaAtIndex(idx)``` Gets the luma of a pixel at index ```idx```\r\n* ```<uint32> = image.getLuma(x, y)``` Gets the luma of a pixel at the x and y coordinate\r\n* ```<uint32> = image.getSepiaAtIndex(idx)``` Gets the sepia-color of a pixel at index ```idx```\r\n* ```<uint32> = image.getSepia(x, y)``` Gets the sepia-color of a pixel at the x and y coordinate\r\n* ```<uint32> = image.getLuminosityAtIndex(idx)``` Gets the luminosity of a pixel at index ```idx```\r\n* ```<uint32> = image.getLuminosity(x, y)``` Gets the luminosity of a pixel at the x and y coordinate\r\n* ```<uint32> = image.getLightnessAtIndex(idx)``` Gets the lightness of a pixel at index ```idx```\r\n* ```<uint32> = image.getLightness(x, y)``` Gets the lightness of a pixel at the x and y coordinate\r\n* ```<uint32> = image.getGrayScaleAtIndex(idx)``` Gets the grayscale-value of a pixel at index ```idx```\r\n* ```<uint32> = image.getGrayScale(x, y)``` Gets the grayscale-value of a pixel at the x and y coordinate\r\n\r\n###Filters\r\nFollowing filters can be applied to an image:\r\n* blur\r\n* grayScale\r\n* lightness\r\n* luma\r\n* luminosity\r\n* sepia\r\n\r\n##API-Documentation\r\n\r\nGenerate the documentation with following command:\r\n```shell\r\nnpm run docs\r\n```\r\nThe documentation will be generated in the ```docs``` folder of the module root.\r\n\r\n##Tests\r\n\r\nRun the tests with the following command:\r\n```shell\r\nnpm run test\r\n```\r\nThe code-coverage will be written to the ```coverage``` folder in the module root.\r\n\r\n##Third-party libraries\r\n\r\nThe following third-party libraries are used by this module:\r\n\r\n###Dependencies\r\n* pngjs: https://github.com/niegowski/node-pngjs\r\n* stream-buffers: https://github.com/samcday/node-stream-buffer\r\n* underscore: http://underscorejs.org\r\n\r\n###Dev-Dependencies\r\n* chai: http://chaijs.com\r\n* coveralls: https://github.com/cainus/node-coveralls\r\n* codeclimate-test-reporter: https://github.com/codeclimate/javascript-test-reporter\r\n* istanbul: https://github.com/gotwarlost/istanbul\r\n* mocha: https://github.com/visionmedia/mocha\r\n* sinon: http://sinonjs.org\r\n* sinon-chai: https://github.com/domenic/sinon-chai\r\n* yuidocjs: https://github.com/yui/yuidoc\r\n\r\n##License\r\n\r\nThe MIT License\r\n\r\nCopyright 2014-2015 Yahoo Inc.\r\n","google":"UA-56408730-5","note":"Don't delete this file! It's used internally to help with page regeneration."}